{
  "address": "0x168edF8da274Fdf505B9d346685Da8E16A704Cdb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "BidId",
          "type": "uint256"
        }
      ],
      "name": "BidURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GranttId",
          "type": "uint256"
        }
      ],
      "name": "CreateGrantProject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_EventTokenSearchIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GrantEventIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_GrantEventURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GrantProjectIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GrantVoteIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_JudgerURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_SearchedStore",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_approveRequiredMsgs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "_getSearchedTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "_setBidURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_raised",
          "type": "string"
        }
      ],
      "name": "_setEventRaised",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_eventWallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "_setEventURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "_setGrantEventURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenBidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "TokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_BidURI",
          "type": "string"
        }
      ],
      "name": "_setTokenBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "EventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_eventid",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_updatedURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_eventid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_raised",
          "type": "string"
        }
      ],
      "name": "createBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventWallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "createEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "createGrantEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "Wallet",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GranttId",
          "type": "uint256"
        }
      ],
      "name": "createGrantVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_event_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "donated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "eventURI",
      "outputs": [
        {
          "internalType": "string[2]",
          "name": "",
          "type": "string[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "getBidIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenID",
          "type": "uint256"
        }
      ],
      "name": "getBidsSearchToken",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "Grantid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        }
      ],
      "name": "getCheckSubmittedProjectGrant",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "getEventIdByURI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "getEventRaised",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "getGetEventsTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "Wallet",
          "type": "string"
        }
      ],
      "name": "getSearchEventbyWallet",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "Grantid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        }
      ],
      "name": "getSearchedGrantVoteProject",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "Grantid",
          "type": "uint256"
        }
      ],
      "name": "getSearchedProjectByGrantID",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenID",
          "type": "uint256"
        }
      ],
      "name": "getTotalBid",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "gettokenIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventID",
          "type": "uint256"
        }
      ],
      "name": "gettokenSearchEventTotal",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "GrantProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GranttId",
          "type": "uint256"
        }
      ],
      "name": "setGrantProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "GrantVoteId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "Wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ProjectId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "GranttId",
          "type": "string"
        }
      ],
      "name": "setGrantVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalGrantEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unbondingDelegations",
      "outputs": [
        {
          "internalType": "int64",
          "name": "completionTime",
          "type": "int64"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_event_id",
          "type": "uint256"
        }
      ],
      "name": "withdrawDonatedMoney",
      "outputs": [
        {
          "internalType": "int64",
          "name": "",
          "type": "int64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb758b099f50e36672540c06aebbc84a19d6edb232764aeb420af86f53645ba1e",
  "receipt": {
    "to": null,
    "from": "0xa41778cDBefa941beD7dd6ac25Ff0a4ADd79B677",
    "contractAddress": "0x168edF8da274Fdf505B9d346685Da8E16A704Cdb",
    "transactionIndex": 1,
    "gasUsed": "4234837",
    "logsBloom": "0x
    "blockHash": "0xb3e27e17468b128c5fcc0560075f4e270ca21aece77a9bd22efdb730ab4d7b7d",
    "transactionHash": "0xb758b099f50e36672540c06aebbc84a19d6edb232764aeb420af86f53645ba1e",
    "logs": [],
    "blockNumber": 14895428,
    "cumulativeGasUsed": "4269900",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "20e78252f33602e416b12894d41ef56b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BidId\",\"type\":\"uint256\"}],\"name\":\"BidURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GranttId\",\"type\":\"uint256\"}],\"name\":\"CreateGrantProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_EventTokenSearchIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GrantEventIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_GrantEventURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GrantProjectIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GrantVoteIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_JudgerURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_SearchedStore\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_approveRequiredMsgs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_getSearchedTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"_setBidURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_raised\",\"type\":\"string\"}],\"name\":\"_setEventRaised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_eventWallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"_setEventURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"_setGrantEventURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenBidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_BidURI\",\"type\":\"string\"}],\"name\":\"_setTokenBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_eventid\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_updatedURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_eventid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_raised\",\"type\":\"string\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventWallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"createEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"createGrantEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Wallet\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GranttId\",\"type\":\"uint256\"}],\"name\":\"createGrantVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_event_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"eventURI\",\"outputs\":[{\"internalType\":\"string[2]\",\"name\":\"\",\"type\":\"string[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"getBidIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"getBidsSearchToken\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Grantid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"}],\"name\":\"getCheckSubmittedProjectGrant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"getEventIdByURI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getEventRaised\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"getGetEventsTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Wallet\",\"type\":\"string\"}],\"name\":\"getSearchEventbyWallet\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Grantid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"}],\"name\":\"getSearchedGrantVoteProject\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Grantid\",\"type\":\"uint256\"}],\"name\":\"getSearchedProjectByGrantID\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"getTotalBid\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"gettokenIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventID\",\"type\":\"uint256\"}],\"name\":\"gettokenSearchEventTotal\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"GrantProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GranttId\",\"type\":\"uint256\"}],\"name\":\"setGrantProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"GrantVoteId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ProjectId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"GranttId\",\"type\":\"string\"}],\"name\":\"setGrantVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGrantEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unbondingDelegations\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"completionTime\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_event_id\",\"type\":\"uint256\"}],\"name\":\"withdrawDonatedMoney\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_approveRequiredMsgs()\":{\"details\":\"approves the staking and distribution contracts for donating\"}},\"stateVariables\":{\"donated\":{\"details\":\"map to keep track of user deposits to the contract.\"},\"stakingMethods\":{\"details\":\"the required authorizations for Staking and Distribution\"},\"unbondingDelegations\":{\"details\":\"map that keeps track of all currently unbonding delegations\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DemeterGift.sol\":\"DemeterGift\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/DemeterGift.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./precompiles/stateful/Staking.sol\\\";\\nimport \\\"./precompiles/stateful/Distribution.sol\\\";\\n\\ncontract DemeterGift{\\n\\n\\n    struct UnbondingRequest {\\n        int64 completionTime;\\n        uint256 amount;\\n    }\\n    /// @dev the required authorizations for Staking and Distribution\\n    string[] private stakingMethods = [MSG_DELEGATE, MSG_UNDELEGATE, MSG_REDELEGATE];\\n    string[] private distributionMethods = [MSG_WITHDRAW_DELEGATOR_REWARD];\\n    /// @dev map to keep track of user deposits to the contract.\\n    mapping(uint256 => uint256) public donated;                                // _ideas_ids       => (Ideas) donated amount\\n    uint256 private _total_delegations;\\n    string private _validatorAddr  = \\\"evmosvaloper158wwas4v6fgcu2x3plg70s6u0fm0lle237kltr\\\";\\n    /// @dev map that keeps track of all currently unbonding delegations\\n    mapping(uint256 => UnbondingRequest) public unbondingDelegations;           // _ideas_ids       => (Ideas) UnbondingRequest\\n  \\n\\n\\n\\tuint256 private _tokenIds;\\n\\tuint256 private _bidIds;\\n\\tuint256 private _eventIds;\\n    uint256 public _GrantEventIds;\\n\\tuint256 public _GrantProjectIds;\\n\\tuint256 public _GrantVoteIds;\\n\\tuint256 private _EventTokenIds;\\n\\tuint256 private _TokenBidIds;\\n\\tuint256 public _EventTokenSearchIds;\\n\\tmapping(uint256 => string[2]) private AllEventTokens;\\n\\tmapping(uint256 => string[3]) private AllGrantVotes;\\n    mapping(uint256 => uint256[2]) private AllGrantProject;\\n\\tmapping(uint256 => string[2]) private AllTokensBids;\\n\\tmapping(uint256 => string[2]) public _SearchedStore;\\n\\tmapping(uint256 => string) private _bidURIs;\\n\\tmapping(uint256 => string) private _tokenURIs;\\n\\tmapping(uint256 => string[2]) private _eventURIs;\\n\\tmapping(uint256 => string) public _GrantEventURIs;\\n    mapping(uint256 => string) public  _JudgerURIs;\\n\\tmapping(uint256 => string) private _eventRaised;\\n\\tmapping(string => string) private _eventTokens;\\n\\n\\nfunction claimToken(\\n\\t\\taddress _claimer,\\n\\t\\tstring memory _tokenURI,\\n\\t\\tuint256 _eventid\\n\\t) public returns (uint256) {\\n\\t\\t_setTokenURI(_tokenIds, _tokenURI);\\n\\t\\t_setTokenEvent(_EventTokenIds, _eventid, _tokenURI);\\n\\t\\t_tokenIds++;\\n\\t\\t_EventTokenIds++;\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\n\\nfunction _setTokenEvent(\\n\\t\\tuint256 EventTokenId,\\n\\t\\tuint256 EventId,\\n\\t\\tstring memory _tokenURI\\n\\t) public virtual {\\n\\t\\tAllEventTokens[EventTokenId] = [\\n\\t\\t\\tStrings.toString(EventId),\\n\\t\\t\\tstring(_tokenURI)\\n\\t\\t];\\n\\t}\\nfunction createEvent(string memory _eventWallet,string memory _eventURI)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_setEventURI(_eventIds,_eventWallet, _eventURI);\\n\\t\\t_setEventRaised(_eventIds, \\\"0\\\");\\n\\t\\t_eventIds++;\\n\\n\\t\\treturn _eventIds;\\n\\t}\\n\\t\\n\\nfunction setGrantProject(\\t\\n\\t\\tuint256 GrantProjectId,\\n\\t\\tuint256 ProjectId,\\n\\t\\tuint256 GranttId\\n\\t) public virtual {\\n\\t\\tAllGrantProject[GrantProjectId] = [GranttId,ProjectId];\\n\\n\\t}\\n\\n\\nfunction CreateGrantProject(\\n\\t\\tuint256 ProjectId,\\n\\t\\tuint256 GranttId\\n\\t) public returns (uint256) {\\n\\t\\tsetGrantProject(_GrantProjectIds,ProjectId,GranttId);\\n\\t\\t_GrantProjectIds++;\\n\\t\\t\\n\\t\\treturn _GrantProjectIds;\\n\\t}\\n\\n\\n\\n\\nfunction createGrantEvent(string memory _eventURI)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_setGrantEventURI(_GrantEventIds, _eventURI);\\n\\t\\t_GrantEventIds++;\\n\\n\\t\\treturn _GrantEventIds;\\n\\t}\\n\\n\\nfunction getCheckSubmittedProjectGrant(uint256 Grantid, uint256 ProjectId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\t\\t\\n\\t\\t\\n\\t\\tfor (uint256 i = 0; i < _GrantProjectIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tAllGrantProject[i][0] == Grantid && \\n\\t\\t\\t\\tAllGrantProject[i][1] == ProjectId \\t\\t\\t\\t\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn false;\\n\\t}\\n\\n\\nfunction getSearchedProjectByGrantID(uint256 Grantid)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256[] memory)\\n\\t{\\n\\t\\t\\n\\t\\tuint256 _TemporarySearch = 0;\\n\\t\\tuint256 _SearchIds = 0;\\n\\t\\t\\n\\t\\t\\n\\t\\tfor (uint256 i = 0; i < _GrantProjectIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tAllGrantProject[i][0] == Grantid\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tuint256[] memory _SearchedProject = new uint256[](_TemporarySearch);\\n\\n\\t\\tfor (uint256 i = 0; i < _GrantProjectIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tAllGrantProject[i][0] == Grantid\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedProject[_SearchIds] = AllGrantProject[i][1];\\n\\t\\t\\t\\t_SearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\treturn _SearchedProject;\\n\\t}\\n\\nfunction setGrantVote(\\t\\n\\t\\tuint256 GrantVoteId,\\n\\t\\tstring memory Wallet,\\n\\t\\tstring memory  ProjectId,\\n\\t\\tstring memory  GranttId\\n\\t) public virtual {\\n\\t\\tAllGrantVotes[GrantVoteId] = [GranttId,ProjectId,Wallet];\\n\\n\\t}\\n\\n\\nfunction createGrantVote(string memory Wallet,uint256 ProjectId,uint256 GranttId)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tsetGrantVote(_GrantVoteIds, Wallet,Strings.toString(ProjectId),Strings.toString(GranttId));\\n\\t\\t_GrantVoteIds++;\\n\\n\\t\\treturn _GrantVoteIds;\\n\\t}\\nfunction getSearchedGrantVoteProject(uint256 Grantid,uint256 ProjectId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\t\\n\\t\\tuint256 _TemporarySearch = 0;\\n\\t\\tuint256 _SearchIds = 0;\\n\\t\\t\\n\\t\\t\\n\\t\\tfor (uint256 i = 0; i < _GrantVoteIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][0])) == keccak256(bytes(Strings.toString(Grantid))) &&\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][1])) == keccak256(bytes(Strings.toString(ProjectId)))\\n\\t\\t\\t\\t\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstring[] memory _SearchedProject = new string[](_TemporarySearch);\\n\\n\\t\\n\\t\\tfor (uint256 i = 0; i < _GrantVoteIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][0])) == keccak256(bytes(Strings.toString(Grantid))) &&\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][1])) == keccak256(bytes(Strings.toString(ProjectId)))\\n\\t\\t\\t\\t\\n\\t\\t\\t) {\\n\\t\\t\\t_SearchedProject[_SearchIds] = AllGrantVotes[i][2];\\n\\t\\t\\t_SearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\treturn _SearchedProject;\\n\\t}\\n\\n\\n\\nfunction gettokenIdByUri(string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _tokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_tokenURIs[i])) == keccak256(bytes(_tokenURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\n\\n\\nfunction getEventIdByURI(string memory _eventURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _eventIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_eventURIs[i][1])) == keccak256(bytes(_eventURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction getBidIdByUri(string memory _bidURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _bidIds; i++) {\\n\\t\\t\\tif (keccak256(bytes(_bidURIs[i])) == keccak256(bytes(_bidURI))) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction gettokenSearchEventTotal(uint256 EventID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreToken = new string[](10);\\n\\n\\t\\tuint256 _EventTokenSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreToken[_EventTokenSearchIds2] = AllEventTokens[i][\\n\\t\\t\\t\\t\\t1\\n\\t\\t\\t\\t];\\n\\t\\t\\t\\t_EventTokenSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreToken;\\n\\t}\\n\\nfunction getSearchEventbyWallet(string memory Wallet)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\n\\t\\tuint256 _TemporarySearch = 0;\\n\\t\\tuint256 _SearchIds = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _eventIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_eventURIs[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Wallet))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstring[] memory _SearchedStoreEvents = new string[](_TemporarySearch);\\n\\t\\tfor (uint256 i = 0; i < _eventIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_eventURIs[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Wallet))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreEvents[_SearchIds] = _eventURIs[i][1];\\n\\t\\t\\t\\t_SearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\treturn _SearchedStoreEvents;\\n\\t}\\n\\nfunction getGetEventsTokenID(uint256 EventId, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventId))) &&\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][1])) ==\\n\\t\\t\\t\\tkeccak256(bytes(_tokenURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction _getSearchedTokenURI(uint256 _tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\treturn _SearchedStore[_tokenId][0];\\n\\t}\\n\\nfunction _setEventURI(uint256 eventId,  string memory _eventWallet ,string memory _eventURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\t_eventURIs[eventId] = [\\n\\t\\t\\t_eventWallet,\\n\\t\\t\\t_eventURI\\n\\t\\t];\\n\\t\\t_eventRaised[eventId] = \\\"0\\\";\\n\\t}\\n\\nfunction _setGrantEventURI(uint256 eventId, string memory _eventURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\t_GrantEventURIs[eventId] = _eventURI;\\n\\t}\\n\\n\\nfunction _setTokenURI(uint256 tokenId, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\t_tokenURIs[tokenId] = _tokenURI;\\n\\t}\\n\\nfunction eventURI(uint256 eventId) public view returns (string[2] memory) {\\n\\t\\treturn _eventURIs[eventId];\\n\\t}\\n\\nfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\n\\t\\treturn _tokenURIs[tokenId];\\n\\t}\\n\\nfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\nfunction totalEvent() public view returns (uint256) {\\n\\t\\treturn _eventIds;\\n\\t}\\n\\nfunction totalGrantEvent() public view returns (uint256) {\\n\\t\\treturn _GrantProjectIds;\\n\\t}\\n\\nfunction _setBidURI(uint256 bidId, string memory _bidURI) public virtual {\\n\\t\\t_bidURIs[bidId] = _bidURI;\\n\\t}\\n\\nfunction BidURI(uint256 BidId) public view returns (string memory) {\\n\\t\\treturn _bidURIs[BidId];\\n\\t}\\n\\nfunction getTotalBid(uint256 TokenID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreBid = new string[](10);\\n\\n\\t\\tuint256 _TokenBidSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllTokensBids[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(TokenID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\\n\\t\\t\\t\\t_TokenBidSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreBid;\\n\\t}\\n\\nfunction getBidsSearchToken(uint256 TokenID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreBid = new string[](10);\\n\\n\\t\\tuint256 _TokenBidSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllTokensBids[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(TokenID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\\n\\t\\t\\t\\t_TokenBidSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreBid;\\n\\t}\\n\\nfunction _setTokenBid(\\n\\t\\tuint256 TokenBidId,\\n\\t\\tuint256 TokenId,\\n\\t\\tstring memory _BidURI\\n\\t) public virtual {\\n\\t\\tAllTokensBids[TokenBidId] = [\\n\\t\\t\\tStrings.toString(TokenId),\\n\\t\\t\\tstring(_BidURI)\\n\\t\\t];\\n\\t}\\n \\nfunction getEventRaised(uint256 _eventId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\treturn _eventRaised[_eventId];\\n\\t}\\n\\nfunction _setEventRaised(uint256 _eventId, string memory _raised)\\n\\t\\tpublic\\n\\t{\\n\\t\\t_eventRaised[_eventId] = _raised;\\n\\t}\\n\\n function createBid(\\n\\t\\tuint256 _tokenId,\\n\\t\\tstring memory _bidURI,\\n\\t\\tstring memory _updatedURI,\\n\\t\\tuint256 _eventid,\\n\\t\\tstring memory _raised\\n\\t) public   {\\n\\t\\tuint256 _EventTokenId = getGetEventsTokenID(\\n\\t\\t\\t_eventid,\\n\\t\\t\\t_tokenURIs[_tokenId]\\n\\t\\t);\\n\\t\\t_tokenURIs[_tokenId] = _updatedURI;\\n\\t\\t_setTokenEvent(_EventTokenId, _eventid, _updatedURI);\\n\\t\\t_setEventRaised(_eventid,_raised);\\n\\n\\t\\t_setTokenBid(_TokenBidIds, _tokenId, _bidURI);\\n\\t\\t_TokenBidIds++;\\n\\t\\t_bidIds++;\\n\\t}\\n\\n\\n\\n    // Doante with a validator Address\\n    function donate(uint256 _event_id,uint256 _amount) public payable  {\\n        _approveRequiredMsgs();\\n        donated[_event_id] += _amount;\\n    }\\n\\n    function stake(uint256 _amount) public {\\n        STAKING_CONTRACT.delegate(address(this), _validatorAddr, _amount);\\n\\n    }\\n\\n    function withdrawDonatedMoney(uint256 _event_id) public returns (int64) {      \\n        _approveRequiredMsgs();\\n        //Sotring Rewards to smart contract\\n        Coin[] memory newRewards = DISTRIBUTION_CONTRACT.withdrawDelegatorRewards(address(this), _validatorAddr);\\n     \\n        //Withdrawing just unbounding\\n        uint256 _amount = donated[_event_id];\\n        int64 completionTime = STAKING_CONTRACT.undelegate(address(this), _validatorAddr, _amount);\\n        //Saving undelegated amount into struct by event_id\\n        unbondingDelegations[_event_id] = UnbondingRequest(completionTime, unbondingDelegations[_event_id].amount + _amount);\\n\\n        //Just withdrawing rewards now\\n        uint256 _rewards_amount = newRewards[0].amount;\\n        (bool sent,) = payable(msg.sender).call{value: _rewards_amount}(\\\"\\\");     \\n        donated[_event_id] = 0;\\n        return  completionTime;\\n    }\\n   /// @dev approves the staking and distribution contracts for donating\\n    function _approveRequiredMsgs() public {\\n        bool successStk = STAKING_CONTRACT.approve(tx.origin,   type(uint256).max, stakingMethods);\\n        require(successStk, \\\"Staking Approve failed\\\");\\n        bool successDist = DISTRIBUTION_CONTRACT.approve(tx.origin, distributionMethods);\\n        require(successDist, \\\"Distribution Approve failed\\\");\\n    }\\n\\n}\\n\\n\\n\",\"keccak256\":\"0x403a43ad3277f658d03ca374a93f39c700de6a09e3bf5878c21e72d74b9f9564\",\"license\":\"MIT\"},\"contracts/precompiles/common/Authorization.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-v3\\npragma solidity >=0.8.17;\\n\\n/// @author Evmos Team\\n/// @title Authorization Interface\\n/// @dev The interface through which solidity contracts will interact with smart contract approvals.\\ninterface AuthorizationI {\\n    /// @dev Approves a list of Cosmos or IBC transactions with a specific amount of tokens.\\n    /// @param spender The address which will spend the funds.\\n    /// @param amount The amount of tokens to be spent.\\n    /// @param methods The message type URLs of the methods to approve.\\n    /// @return approved Boolean value to indicate if the approval was successful.\\n    function approve(\\n        address spender,\\n        uint256 amount,\\n        string[] calldata methods\\n    ) external returns (bool approved);\\n\\n    /// @dev Increase the allowance of a given spender by a specific amount of tokens for IBC\\n    /// transfer methods or staking.\\n    /// @param spender The address which will spend the funds.\\n    /// @param amount The amount of tokens to be spent.\\n    /// @param methods The message type URLs of the methods to approve.\\n    /// @return approved Boolean value to indicate if the approval was successful.\\n    function increaseAllowance(\\n        address spender,\\n        uint256 amount,\\n        string[] calldata methods\\n    ) external returns (bool approved);\\n\\n    /// @dev Decreases the allowance of a given spender by a specific amount of tokens for IBC\\n    /// transfer methods or staking.\\n    /// @param spender The address which will spend the funds.\\n    /// @param amount The amount of tokens to be spent.\\n    /// @param methods The message type URLs of the methods to approve.\\n    /// @return approved Boolean value to indicate if the approval was successful.\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 amount,\\n        string[] calldata methods\\n    ) external returns (bool approved);\\n\\n\\n    /// @dev Returns the remaining number of tokens that spender will be allowed to spend\\n    /// on behalf of the owner through IBC transfer methods or staking. This is zero by default.\\n    /// @param owner The address of the account owning tokens.\\n    /// @param spender The address of the account able to transfer the tokens.\\n    /// @param method The message type URL of the methods for which the approval should be queried.\\n    /// @return remaining The remaining number of tokens available to be spent.\\n    function allowance(\\n        address owner,\\n        address spender,\\n        string calldata method\\n    ) external view returns (uint256 remaining);\\n\\n    /// @dev This event is emitted when the allowance of a spender is set by a call to the approve method.\\n    /// The value field specifies the new allowance and the methods field holds the information for which methods\\n    /// the approval was set.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The address which will spend the funds.\\n    /// @param methods The message type URLs of the methods for which the approval is set.\\n    /// @param value The amount of tokens approved to be spent.\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        string[] methods,\\n        uint256 value\\n    );\\n\\n    /// @dev This event is emitted when the allowance of a spender is changed by a call to the decrease or increase\\n    /// allowance method. The values field specifies the new allowances and the methods field holds the\\n    /// information for which methods the approval was set.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The address which will spend the funds.\\n    /// @param methods The message type URLs of the methods for which the approval is set.\\n    /// @param values The amounts of tokens approved to be spent.\\n    event AllowanceChange(\\n        address indexed owner,\\n        address indexed spender,\\n        string[] methods,\\n        uint256[] values\\n    );\\n}\\n\",\"keccak256\":\"0xf77a5f9eb42b7f546d2beeb49e1c120f0491620fbf1402a687ac34a275c6cb05\",\"license\":\"LGPL-v3\"},\"contracts/precompiles/common/GenericAuthorization.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-v3\\npragma solidity >=0.8.17;\\n\\n/// @author Evmos Team\\n/// @title Authorization Interface\\n/// @dev The interface through which solidity contracts will interact with smart contract approvals.\\ninterface GenericAuthorizationI {\\n    /// @dev Approves a list of Cosmos or IBC transactions with a specific amount of tokens.\\n    /// @param spender The address which will spend the funds.\\n    /// @param methods The message type URLs of the methods to approve.\\n    /// @return approved Boolean value to indicate if the approval was successful.\\n    function approve(\\n        address spender,\\n        string[] calldata methods\\n    ) external returns (bool approved);\\n\\n    /// @dev Revokes a list of Cosmos transactions.\\n    /// @param spender The address which will spend the funds.\\n    /// @param methods The message type URLs of the methods to revoke.\\n    /// @return revoked Boolean value to indicate if the revocation was successful.\\n    function revoke(\\n        address spender,\\n        string[] calldata methods\\n    ) external returns (bool revoked);\\n\\n    /// @dev This event is emitted when the allowance of a spender is set by a call to the approve method.\\n    /// The value field specifies the new allowance and the methods field holds the information for which methods\\n    /// the approval was set.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The address which will spend the funds.\\n    /// @param methods The message type URLs of the methods for which the approval is set.\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        string[] methods\\n    );\\n\\n    /// @dev This event is emitted when an owner revokes a spender's allowance.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The address which will spend the funds.\\n    /// @param methods The message type URLs of the methods for which the approval is set.\\n    event Revocation(\\n        address indexed owner,\\n        address indexed spender,\\n        string[] methods\\n    );\\n}\\n\",\"keccak256\":\"0x5560defd75b84c2d333dc68120a9d425423ff7cd0c443fcd50209f9d0e0dff88\",\"license\":\"LGPL-v3\"},\"contracts/precompiles/common/Types.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-v3\\npragma solidity >=0.8.17;\\n\\nstruct Dec {\\n    uint256 value;\\n    uint8 precision;\\n}\\n\\n/// @dev Coin is a struct that represents a token with a denomination and an amount.\\nstruct Coin {\\n    string denom;\\n    uint256 amount;\\n}\\n\\n/// @dev DecCoin is a struct that represents a token with a denomination, an amount and a precision.\\nstruct DecCoin {\\n    string denom;\\n    uint256 amount;\\n    uint8 precision;\\n}\\n\\n/// @dev PageResponse is a struct that represents a page response.\\nstruct PageResponse {\\n    bytes nextKey;\\n    uint64 total;\\n}\\n\",\"keccak256\":\"0x2280bf7e63e011c5263d33ae3cf64673e27ee08226116a5ae289a05c026e5cc8\",\"license\":\"LGPL-v3\"},\"contracts/precompiles/stateful/Distribution.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-v3\\npragma solidity >=0.8.17;\\n\\nimport \\\"../common/GenericAuthorization.sol\\\" as genericAuth;\\nimport \\\"../common/Types.sol\\\";\\n\\n/// @dev The DistributionI contract's address.\\naddress constant DISTRIBUTION_PRECOMPILE_ADDRESS = 0x0000000000000000000000000000000000000801;\\n\\n/// @dev Define all the available distribution methods.\\nstring constant MSG_SET_WITHDRAWER_ADDRESS = \\\"/cosmos.distribution.v1beta1.MsgSetWithdrawAddress\\\";\\nstring constant MSG_WITHDRAW_DELEGATOR_REWARD = \\\"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\\\";\\nstring constant MSG_WITHDRAW_VALIDATOR_COMMISSION = \\\"/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission\\\";\\n\\n/// @dev The DistributionI contract's instance.\\nDistributionI constant DISTRIBUTION_CONTRACT = DistributionI(DISTRIBUTION_PRECOMPILE_ADDRESS);\\n\\nstruct ValidatorSlashEvent {\\n    uint64 validatorPeriod;\\n    Dec fraction;\\n}\\n\\nstruct ValidatorDistributionInfo {\\n    string operatorAddress;\\n    DecCoin[] selfBondRewards;\\n    DecCoin[] commission;\\n}\\n\\nstruct DelegationDelegatorReward {\\n    string validatorAddress;\\n    DecCoin[] reward;\\n}\\n\\n/// @author Evmos Team\\n/// @title Distribution Precompile Contract\\n/// @dev The interface through which solidity contracts will interact with Distribution\\n/// @custom:address 0x0000000000000000000000000000000000000801\\ninterface DistributionI is genericAuth.GenericAuthorizationI {\\n    /// TRANSACTIONS\\n    /// @dev Change the address, that can withdraw the rewards of a delegator.\\n    /// Note that this address cannot be a module account.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param withdrawerAddress The address that will be capable of withdrawing rewards for\\n    /// the given delegator address\\n    function setWithdrawAddress(\\n        address delegatorAddress,\\n        string memory withdrawerAddress\\n    ) external returns (bool success);\\n\\n    /// @dev Withdraw the rewards of a delegator from a validator\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @return amount The amount of Coin withdrawn\\n    function withdrawDelegatorRewards(\\n        address delegatorAddress,\\n        string memory validatorAddress\\n    )\\n    external\\n    returns (\\n        Coin[] calldata amount\\n    );\\n\\n    /// @dev Withdraws the rewards commission of a validator.\\n    /// @param validatorAddress The address of the validator\\n    /// @return amount The amount of Coin withdrawn\\n    function withdrawValidatorCommission(\\n        string memory validatorAddress\\n    )\\n    external\\n    returns (\\n        Coin[] calldata amount\\n    );\\n\\n    /// QUERIES\\n    /// @dev Queries validator commission and self-delegation rewards for validator.\\n    /// @param validatorAddress The address of the validator\\n    /// @return distributionInfo The validator's distribution info\\n    function validatorDistributionInfo(\\n        string memory validatorAddress\\n    )\\n    external\\n    view\\n    returns (\\n        ValidatorDistributionInfo[] calldata distributionInfo // FIXME: remove unnecessary slice\\n    );\\n\\n    /// @dev Queries the outstanding rewards of a validator address.\\n    /// @param validatorAddress The address of the validator\\n    /// @return rewards The validator's outstanding rewards\\n    function validatorOutstandingRewards(\\n        string memory validatorAddress\\n    )\\n    external\\n    view\\n    returns (\\n        DecCoin[] calldata rewards\\n    );\\n\\n    /// @dev Queries the accumulated commission for a validator.\\n    /// @param validatorAddress The address of the validator\\n    /// @return commission The validator's commission\\n    function validatorCommission(\\n        string memory validatorAddress\\n    )\\n    external\\n    view\\n    returns (\\n        DecCoin[] calldata commission\\n    );\\n\\n    /// @dev Queries the slashing events for a validator in a given height interval\\n    /// defined by the starting and ending height.\\n    /// @param validatorAddress The address of the validator\\n    /// @param startingHeight The starting height\\n    /// @param endingHeight The ending height\\n    /// @return slashes The validator's slash events\\n    /// @return pageResponse The pagination response for the query\\n    function validatorSlashes(\\n        string memory validatorAddress,\\n        uint64 startingHeight,\\n        uint64 endingHeight\\n    )\\n    external\\n    view\\n    returns (\\n        ValidatorSlashEvent[] calldata slashes,\\n        PageResponse calldata pageResponse\\n    );\\n\\n    /// @dev Queries the total rewards accrued by a delegation from a specific address to a given validator.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @return rewards The total rewards accrued by a delegation.\\n    function delegationRewards(\\n        address delegatorAddress,\\n        string memory validatorAddress\\n    )\\n    external\\n    view\\n    returns (\\n        DecCoin[] calldata rewards\\n    );\\n\\n    /// @dev Queries the total rewards accrued by each validator, that a given\\n    /// address has delegated to.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @return rewards The total rewards accrued by each validator for a delegator.\\n    /// @return total The total rewards accrued by a delegator.\\n    function delegationTotalRewards(\\n        address delegatorAddress\\n    )\\n    external\\n    view\\n    returns (\\n        DelegationDelegatorReward[] calldata rewards,\\n        DecCoin[] calldata total\\n    );\\n\\n    /// @dev Queries all validators, that a given address has delegated to.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @return validators The addresses of all validators, that were delegated to by the given address.\\n    function delegatorValidators(\\n        address delegatorAddress\\n    ) external view returns (string[] calldata validators);\\n\\n    /// @dev Queries the address capable of withdrawing rewards for a given delegator.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @return withdrawAddress The address capable of withdrawing rewards for the delegator.\\n    function delegatorWithdrawAddress(\\n        address delegatorAddress\\n    ) external view returns (string memory withdrawAddress);\\n\\n    /// @dev SetWithdrawerAddress defines an Event emitted when a new withdrawer address is being set\\n    /// @param caller the caller of the transaction\\n    /// @param withdrawerAddress the newly set withdrawer address\\n    event SetWithdrawerAddress(\\n        address indexed caller,\\n        string withdrawerAddress\\n    );\\n\\n    /// @dev WithdrawDelegatorRewards defines an Event emitted when rewards from a delegation are withdrawn\\n    /// @param delegatorAddress the address of the delegator\\n    /// @param validatorAddress the address of the validator\\n    /// @param amount the amount being withdrawn from the delegation\\n    event WithdrawDelegatorRewards(\\n        address indexed delegatorAddress,\\n        string indexed validatorAddress,\\n        uint256 amount\\n    );\\n\\n    /// @dev WithdrawValidatorCommission defines an Event emitted when validator commissions are being withdrawn\\n    /// @param validatorAddress is the address of the validator\\n    /// @param commission is the total commission earned by the validator\\n    event WithdrawValidatorCommission(\\n        string indexed validatorAddress,\\n        uint256 commission\\n    );\\n}\\n\",\"keccak256\":\"0x6815efb027a2ce3fc4d43073ac9e1dc117b156a74951c17b19f3f531483dc9e1\",\"license\":\"LGPL-v3\"},\"contracts/precompiles/stateful/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-v3\\npragma solidity >=0.8.17;\\n\\nimport \\\"../common/Authorization.sol\\\" as authorization;\\nimport \\\"../common/Types.sol\\\";\\n\\n/// @dev The StakingI contract's address.\\naddress constant STAKING_PRECOMPILE_ADDRESS = 0x0000000000000000000000000000000000000800;\\n\\n/// @dev The StakingI contract's instance.\\nStakingI constant STAKING_CONTRACT = StakingI(STAKING_PRECOMPILE_ADDRESS);\\n\\n/// @dev Define all the available staking methods.\\nstring constant MSG_DELEGATE = \\\"/cosmos.staking.v1beta1.MsgDelegate\\\";\\nstring constant MSG_UNDELEGATE = \\\"/cosmos.staking.v1beta1.MsgUndelegate\\\";\\nstring constant MSG_REDELEGATE = \\\"/cosmos.staking.v1beta1.MsgBeginRedelegate\\\";\\nstring constant MSG_CANCEL_UNDELEGATION = \\\"/cosmos.staking.v1beta1.MsgCancelUnbondingDelegation\\\";\\n\\n/// @dev Defines the initial commission rates to be used for creating\\n/// a validator.\\nstruct CommissionRates {\\n    uint256 rate;\\n    uint256 maxRate;\\n    uint256 maxChangeRate;\\n}\\n\\n/// @dev Defines commission parameters for a given validator.\\nstruct Commission {\\n    CommissionRates commissionRates;\\n    uint256 updateTime;\\n}\\n\\n\\n/// @dev Represents a validator in the staking module.\\nstruct Validator {\\n    string operatorAddress;\\n    string consensusPubkey;\\n    bool jailed;\\n    BondStatus status;\\n    uint256 tokens;\\n    uint256 delegatorShares;\\n    string description;\\n    int64 unbondingHeight;\\n    int64 unbondingTime;\\n    uint256 commission;\\n    uint256 minSelfDelegation;\\n}\\n\\nstruct RedelegationResponse {\\n    Redelegation redelegation;\\n    RedelegationEntryResponse[] entries;\\n}\\n\\nstruct Redelegation {\\n    RedelegationEntry[] entries;\\n}\\n\\nstruct RedelegationEntryResponse {\\n    RedelegationEntry redelegationEntry;\\n    uint256 balance;\\n}\\n\\nstruct RedelegationEntry {\\n    int64 creationHeight;\\n    int64 completionTime;\\n    uint256 initialBalance;\\n    uint256 sharesDst;\\n}\\n\\nstruct UnbondingDelegationEntry {\\n    int64 creationHeight;\\n    int64 completionTime;\\n    uint256 initialBalance;\\n    uint256 balance;\\n}\\n\\nstruct PageRequest {\\n    bytes key;\\n    uint64 offset;\\n    uint64 limit;\\n    bool countTotal;\\n    bool reverse;\\n}\\n\\n/// @dev The status of the validator.\\nenum BondStatus {\\n    Unspecified,\\n    Unbonded,\\n    Unbonding,\\n    Bonded\\n}\\n\\n/// @author Evmos Team\\n/// @title Staking Precompiled Contract\\n/// @dev The interface through which solidity contracts will interact with staking.\\n/// We follow this same interface including four-byte function selectors, in the precompile that\\n/// wraps the pallet.\\n/// @custom:address 0x0000000000000000000000000000000000000800\\ninterface StakingI is authorization.AuthorizationI {\\n    /// @dev Defines a method for performing a delegation of coins from a delegator to a validator.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @param amount The amount of the Coin to be delegated to the validator\\n    function delegate(\\n        address delegatorAddress,\\n        string memory validatorAddress,\\n        uint256 amount\\n    ) external returns (int64 completionTime);\\n\\n    /// @dev Defines a method for performing an undelegation from a delegate and a validator.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @param amount The amount to be undelegated from the validator\\n    /// @return completionTime The time when the undelegation is completed\\n    function undelegate(\\n        address delegatorAddress,\\n        string memory validatorAddress,\\n        uint256 amount\\n    ) external returns (int64 completionTime);\\n\\n    /// @dev Defines a method for performing a redelegation\\n    /// of coins from a delegator and source validator to a destination validator.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorSrcAddress The validator from which the redelegation is initiated\\n    /// @param validatorDstAddress The validator to which the redelegation is destined\\n    /// @param amount The amount to be redelegated to the validator\\n    /// @return completionTime The time when the redelegation is completed\\n    function redelegate(\\n        address delegatorAddress,\\n        string memory validatorSrcAddress,\\n        string memory validatorDstAddress,\\n        uint256 amount\\n    ) external returns (int64 completionTime);\\n\\n    /// @dev Allows delegators to cancel the unbondingDelegation entry\\n    /// and to delegate back to a previous validator.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @param amount The amount of the Coin\\n    /// @param creationHeight The height at which the unbonding took place\\n    /// @return completionTime The time when the cancellation of the unbonding delegation is completed\\n    function cancelUnbondingDelegation(\\n        address delegatorAddress,\\n        string memory validatorAddress,\\n        uint256 amount,\\n        uint256 creationHeight\\n    ) external returns (int64 completionTime);\\n\\n    /// @dev Queries the given amount of the bond denomination to a validator.\\n    /// @param delegatorAddress The address of the delegator.\\n    /// @param validatorAddress The address of the validator.\\n    /// @return shares The amount of shares, that the delegator has received.\\n    /// @return balance The amount in Coin, that the delegator has delegated to the given validator.\\n    function delegation(\\n        address delegatorAddress,\\n        string memory validatorAddress\\n    ) external view returns (uint256 shares, Coin calldata balance);\\n\\n    /// @dev Returns the delegation shares and coins, that are currently\\n    /// unbonding for a given delegator and validator pair.\\n    /// @param delegatorAddress The address of the delegator.\\n    /// @param validatorAddress The address of the validator.\\n    /// @return entries The delegations that are currently unbonding.\\n    function unbondingDelegation(\\n        address delegatorAddress,\\n        string memory validatorAddress\\n    ) external view returns (UnbondingDelegationEntry[] calldata entries);\\n\\n    /// @dev Queries validator info for a given validator address.\\n    /// @param validatorAddress The address of the validator.\\n    /// @return validators The validator info for the given validator address.\\n    function validator(\\n        string memory validatorAddress\\n    )\\n    external view returns (\\n        Validator[] calldata validators\\n    );\\n\\n    /// @dev Queries all validators that match the given status.\\n    /// @param status Enables to query for validators matching a given status.\\n    /// @param pageRequest Defines an optional pagination for the request.\\n    function validators(\\n        string memory status,\\n        PageRequest calldata pageRequest\\n    ) external view returns (\\n        Validator[] calldata validators,\\n        PageResponse calldata pageResponse\\n    );\\n\\n    /// @dev Queries all redelegations from a source to a destination validator for a given delegator.\\n    /// @param delegatorAddress The address of the delegator.\\n    /// @param srcValidatorAddress Defines the validator address to redelegate from.\\n    /// @param dstValidatorAddress Defines the validator address to redelegate to.\\n    /// @return entries The active redelegations for the given delegator, source and destination validator combination.\\n    function redelegation(\\n        address delegatorAddress,\\n        string memory srcValidatorAddress,\\n        string memory dstValidatorAddress\\n    ) external view returns (RedelegationEntry[] calldata entries);\\n\\n    /// @dev Queries all redelegations from a source to to a destination validator\\n    /// for a given delegator in a specified pagination manner.\\n    /// @param delegatorAddress The address of the delegator.\\n    /// @param srcValidatorAddress Defines the validator address to redelegate from.\\n    /// @param dstValidatorAddress Defines the validator address to redelegate to.\\n    /// @param pageRequest Defines an optional pagination for the request.\\n    /// @return response Holds the redelegations for the given delegator, source and destination validator combination.\\n    function redelegations(\\n        address delegatorAddress,\\n        string memory srcValidatorAddress,\\n        string memory dstValidatorAddress,\\n        PageRequest calldata pageRequest\\n    ) external view returns (RedelegationResponse calldata response);\\n\\n    /// @dev Delegate defines an Event emitted when a given amount of tokens are delegated from the\\n    /// delegator address to the validator address.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @param amount The amount of Coin being delegated\\n    /// @param newShares The new delegation shares being held\\n    event Delegate(\\n        address indexed delegatorAddress,\\n        string indexed validatorAddress,\\n        uint256 amount,\\n        uint256 newShares\\n    );\\n\\n    /// @dev Unbond defines an Event emitted when a given amount of tokens are unbonded from the\\n    /// validator address to the delegator address.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @param amount The amount of Coin being unbonded\\n    /// @param completionTime The time at which the unbonding is completed\\n    event Unbond(\\n        address indexed delegatorAddress,\\n        string indexed validatorAddress,\\n        uint256 amount,\\n        uint256 completionTime\\n    );\\n\\n    /// @dev Redelegate defines an Event emitted when a given amount of tokens are redelegated from\\n    /// the source validator address to the destination validator address.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorSrcAddress The address of the validator from which the delegation is retracted\\n    /// @param validatorDstAddress The address of the validator to which the delegation is directed\\n    /// @param amount The amount of Coin being redelegated\\n    /// @param completionTime The time at which the redelegation is completed\\n    event Redelegate(\\n        address indexed delegatorAddress,\\n        string indexed validatorSrcAddress,\\n        string indexed validatorDstAddress,\\n        uint256 amount,\\n        uint256 completionTime\\n    );\\n\\n    /// @dev CancelUnbondingDelegation defines an Event emitted when a given amount of tokens\\n    /// that are in the process of unbonding from the validator address are bonded again.\\n    /// @param delegatorAddress The address of the delegator\\n    /// @param validatorAddress The address of the validator\\n    /// @param amount The amount of Coin that was in the unbonding process which is to be cancelled\\n    /// @param creationHeight The block height at which the unbonding of a delegation was initiated\\n    event CancelUnbondingDelegation(\\n        address indexed delegatorAddress,\\n        string indexed validatorAddress,\\n        uint256 amount,\\n        uint256 creationHeight\\n    );\\n}\\n\",\"keccak256\":\"0x774d4bf7a848893697fa75fa11a2ec288e6df6f010f9bdd8b3c6010ef007ac67\",\"license\":\"LGPL-v3\"}},\"version\":1}",
  "bytecode": "0x6080604052604051806060016040528060405180606001604052806023815260200162004ad760239139815260200160405180606001604052806025815260200162004a7b6025913981526020016040518060600160405280602a815260200162004a1e602a913981525060009060036200007c929190620000f7565b50604051806020016040528060405180606001604052806037815260200162004aa0603791398152506001906001620000b792919062000157565b5060405180606001604052806033815260200162004a486033913960049081620000e29190620004be565b50348015620000f057600080fd5b50620005a5565b82805482825590600052602060002090810192821562000144579160200282015b8281111562000143578251829081620001329190620004be565b509160200191906001019062000118565b5b509050620001539190620001b7565b5090565b828054828255906000526020600020908101928215620001a4579160200282015b82811115620001a3578251829081620001929190620004be565b509160200191906001019062000178565b5b509050620001b39190620001b7565b5090565b5b80821115620001db5760008181620001d19190620001df565b50600101620001b8565b5090565b508054620001ed90620002ad565b6000825580601f1062000201575062000222565b601f01602090049060005260206000209081019062000221919062000225565b5b50565b5b808211156200024057600081600090555060010162000226565b5090565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002c657607f821691505b602082108103620002dc57620002db6200027e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003467fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000307565b62000352868362000307565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200039f6200039962000393846200036a565b62000374565b6200036a565b9050919050565b6000819050919050565b620003bb836200037e565b620003d3620003ca82620003a6565b84845462000314565b825550505050565b600090565b620003ea620003db565b620003f7818484620003b0565b505050565b5b818110156200041f5762000413600082620003e0565b600181019050620003fd565b5050565b601f8211156200046e576200043881620002e2565b6200044384620002f7565b8101602085101562000453578190505b6200046b6200046285620002f7565b830182620003fc565b50505b505050565b600082821c905092915050565b6000620004936000198460080262000473565b1980831691505092915050565b6000620004ae838362000480565b9150826002028217905092915050565b620004c98262000244565b67ffffffffffffffff811115620004e557620004e46200024f565b5b620004f18254620002ad565b620004fe82828562000423565b600060209050601f83116001811462000536576000841562000521578287015190505b6200052d8582620004a0565b8655506200059d565b601f1984166200054686620002e2565b60005b82811015620005705784890151825560018201915060208501945060208101905062000549565b868310156200059057848901516200058c601f89168262000480565b8355505b6001600288020188555050505b505050505050565b61446980620005b56000396000f3fe6080604052600436106102885760003560e01c80637eadfa6a1161015a578063c08e953d116100c1578063dfc5e1691161007a578063dfc5e16914610aec578063e08033d314610b29578063e257a94c14610b52578063eb1d234d14610b8f578063f327579414610bcc578063f880eb1914610bf557610288565b8063c08e953d146109b6578063c87b56dd146109f3578063cef80b3a14610a30578063d45fc51614610a5b578063d654e99314610a98578063dcbe2ed914610ac157610288565b8063a0fd0c6a11610113578063a0fd0c6a14610894578063a694fc3a146108d1578063a99bee2e146108fa578063aed4796114610925578063b10a5dfa14610962578063b2947c711461099f57610288565b80637eadfa6a1461074c57806384eb8f6814610777578063912101cf146107a0578063932a196b146107dd57806396d5a7391461081a5780639c6353e81461085757610288565b80633592dd80116101fe5780635154380a116101b75780635154380a146105f1578063523796271461062e57806353c227cc1461066b57806361958158146106a85780637495f854146106d15780637cedbc1e1461070f57610288565b80633592dd801461049757806339053271146104c0578063414d9a2b146104fd578063446a92e31461053a5780634eb083ec146105775780634ef4e80f146105b457610288565b806318160ddd1161025057806318160ddd1461034f5780631dacc07e1461037a5780631e65e117146103a357806328520ab7146103e0578063304b16db1461041d57806335011d901461045a57610288565b8063015388681461028d5780630ae240cf146102b65780630cdd53f6146102df578063144cbca6146102fb5780631677bf0814610326575b600080fd5b34801561029957600080fd5b506102b460048036038101906102af9190612f2b565b610c20565b005b3480156102c257600080fd5b506102dd60048036038101906102d89190612f87565b610c45565b005b6102f960048036038101906102f49190613042565b610c88565b005b34801561030757600080fd5b50610310610cbe565b60405161031d9190613091565b60405180910390f35b34801561033257600080fd5b5061034d60048036038101906103489190612f2b565b610cc4565b005b34801561035b57600080fd5b50610364610ce9565b6040516103719190613091565b60405180910390f35b34801561038657600080fd5b506103a1600480360381019061039c91906130ac565b610cf3565b005b3480156103af57600080fd5b506103ca60048036038101906103c5919061317b565b610e17565b6040516103d79190613305565b60405180910390f35b3480156103ec57600080fd5b5061040760048036038101906104029190612f2b565b611039565b6040516104149190613091565b60405180910390f35b34801561042957600080fd5b50610444600480360381019061043f919061317b565b611112565b6040516104519190613091565b60405180910390f35b34801561046657600080fd5b50610481600480360381019061047c9190613385565b611194565b60405161048e9190613091565b60405180910390f35b3480156104a357600080fd5b506104be60048036038101906104b991906133f4565b6111eb565b005b3480156104cc57600080fd5b506104e760048036038101906104e29190613042565b61122f565b6040516104f4919061347e565b60405180910390f35b34801561050957600080fd5b50610524600480360381019061051f9190613499565b6112cb565b6040516105319190613091565b60405180910390f35b34801561054657600080fd5b50610561600480360381019061055c9190613499565b6112e3565b60405161056e9190613510565b60405180910390f35b34801561058357600080fd5b5061059e60048036038101906105999190613499565b611388565b6040516105ab9190613510565b60405180910390f35b3480156105c057600080fd5b506105db60048036038101906105d69190613042565b61142d565b6040516105e89190613091565b60405180910390f35b3480156105fd57600080fd5b5061061860048036038101906106139190613499565b61145f565b6040516106259190613305565b60405180910390f35b34801561063a57600080fd5b506106556004803603810190610650919061317b565b61160e565b6040516106629190613091565b60405180910390f35b34801561067757600080fd5b50610692600480360381019061068d9190613499565b61163e565b60405161069f9190613510565b60405180910390f35b3480156106b457600080fd5b506106cf60048036038101906106ca9190613532565b6116de565b005b3480156106dd57600080fd5b506106f860048036038101906106f39190613499565b611770565b6040516107069291906135d9565b60405180910390f35b34801561071b57600080fd5b5061073660048036038101906107319190613499565b6117a1565b6040516107439190613510565b60405180910390f35b34801561075857600080fd5b5061076161185a565b60405161076e9190613091565b60405180910390f35b34801561078357600080fd5b5061079e60048036038101906107999190612f2b565b611864565b005b3480156107ac57600080fd5b506107c760048036038101906107c29190613042565b611889565b6040516107d49190613305565b60405180910390f35b3480156107e957600080fd5b5061080460048036038101906107ff919061317b565b611b68565b6040516108119190613091565b60405180910390f35b34801561082657600080fd5b50610841600480360381019061083c9190613499565b611bd6565b60405161084e91906136c0565b60405180910390f35b34801561086357600080fd5b5061087e60048036038101906108799190613499565b611d36565b60405161088b91906136e2565b60405180910390f35b3480156108a057600080fd5b506108bb60048036038101906108b69190613499565b611faa565b6040516108c8919061379f565b60405180910390f35b3480156108dd57600080fd5b506108f860048036038101906108f39190613499565b61208a565b005b34801561090657600080fd5b5061090f612111565b60405161091c9190613091565b60405180910390f35b34801561093157600080fd5b5061094c60048036038101906109479190613499565b612117565b6040516109599190613305565b60405180910390f35b34801561096e57600080fd5b5061098960048036038101906109849190613042565b6122c6565b6040516109969190613510565b60405180910390f35b3480156109ab57600080fd5b506109b4612376565b005b3480156109c257600080fd5b506109dd60048036038101906109d891906137c1565b612526565b6040516109ea9190613091565b60405180910390f35b3480156109ff57600080fd5b50610a1a6004803603810190610a159190613499565b61256a565b604051610a279190613510565b60405180910390f35b348015610a3c57600080fd5b50610a4561260f565b604051610a529190613091565b60405180910390f35b348015610a6757600080fd5b50610a826004803603810190610a7d919061317b565b612615565b604051610a8f9190613091565b60405180910390f35b348015610aa457600080fd5b50610abf6004803603810190610aba91906133f4565b612683565b005b348015610acd57600080fd5b50610ad66126c7565b604051610ae39190613091565b60405180910390f35b348015610af857600080fd5b50610b136004803603810190610b0e9190613499565b6126cd565b604051610b209190613510565b60405180910390f35b348015610b3557600080fd5b50610b506004803603810190610b4b9190612f2b565b61276d565b005b348015610b5e57600080fd5b50610b796004803603810190610b749190613830565b612792565b604051610b869190613091565b60405180910390f35b348015610b9b57600080fd5b50610bb66004803603810190610bb19190613499565b612805565b604051610bc39190613305565b60405180910390f35b348015610bd857600080fd5b50610bf36004803603810190610bee91906138a8565b6129b4565b005b348015610c0157600080fd5b50610c0a6129f0565b604051610c179190613091565b60405180910390f35b80601560008481526020019081526020016000209081610c409190613b07565b505050565b60405180606001604052808281526020018381526020018481525060106000868152602001908152602001600020906003610c81929190612c1b565b5050505050565b610c90612376565b80600260008481526020019081526020016000206000828254610cb39190613c08565b925050819055505050565b600e5481565b80601960008481526020019081526020016000209081610ce49190613b07565b505050565b6000600654905090565b6000610d9a83601560008981526020019081526020016000208054610d179061392a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d439061392a565b8015610d905780601f10610d6557610100808354040283529160200191610d90565b820191906000526020600020905b815481529060010190602001808311610d7357829003601f168201915b5050505050611039565b905083601560008881526020019081526020016000209081610dbc9190613b07565b50610dc88184866111eb565b610dd28383610cc4565b610ddf600d548787612683565b600d6000815480929190610df290613c3c565b919050555060076000815480929190610e0a90613c3c565b9190505550505050505050565b606060008060005b600854811015610e9457848051906020012060166000838152602001908152602001600020600060028110610e5757610e56613c84565b5b01604051610e659190613d56565b604051809103902003610e81578280610e7d90613c3c565b9350505b8080610e8c90613c3c565b915050610e1f565b5060008267ffffffffffffffff811115610eb157610eb0612e00565b5b604051908082528060200260200182016040528015610ee457816020015b6060815260200190600190039081610ecf5790505b50905060005b60085481101561102d57858051906020012060166000838152602001908152602001600020600060028110610f2257610f21613c84565b5b01604051610f309190613d56565b60405180910390200361101a5760166000828152602001908152602001600020600160028110610f6357610f62613c84565b5b018054610f6f9061392a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9b9061392a565b8015610fe85780601f10610fbd57610100808354040283529160200191610fe8565b820191906000526020600020905b815481529060010190602001808311610fcb57829003601f168201915b505050505082848151811061100057610fff613c84565b5b6020026020010181905250828061101690613c3c565b9350505b808061102590613c3c565b915050610eea565b50809350505050919050565b600080600090505b600c5481101561110657611054846129fa565b80519060200120600f600083815260200190815260200160002060006002811061108157611080613c84565b5b0160405161108f9190613d56565b60405180910390201480156110e557508280519060200120600f60008381526020019081526020016000206001600281106110cd576110cc613c84565b5b016040516110db9190613d56565b6040518091039020145b156110f3578091505061110c565b80806110fe90613c3c565b915050611041565b50600090505b92915050565b600080600090505b6008548110156111895782805190602001206016600083815260200190815260200160002060016002811061115257611151613c84565b5b016040516111609190613d56565b604051809103902003611176578091505061118f565b808061118190613c3c565b91505061111a565b50600090505b919050565b60006111a260065484610c20565b6111af600c5483856111eb565b600660008154809291906111c290613c3c565b9190505550600c60008154809291906111da90613c3c565b919050555060065490509392505050565b60405180604001604052806111ff846129fa565b815260200182815250600f6000858152602001908152602001600020906002611229929190612c67565b50505050565b600080600090505b600a548110156112bf57836011600083815260200190815260200160002060006002811061126857611267613c84565b5b015414801561129d5750826011600083815260200190815260200160002060016002811061129957611298613c84565b5b0154145b156112ac5760019150506112c5565b80806112b790613c3c565b915050611237565b50600090505b92915050565b60026020528060005260406000206000915090505481565b60606014600083815260200190815260200160002080546113039061392a565b80601f016020809104026020016040519081016040528092919081815260200182805461132f9061392a565b801561137c5780601f106113515761010080835404028352916020019161137c565b820191906000526020600020905b81548152906001019060200180831161135f57829003601f168201915b50505050509050919050565b60606019600083815260200190815260200160002080546113a89061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546113d49061392a565b80156114215780601f106113f657610100808354040283529160200191611421565b820191906000526020600020905b81548152906001019060200180831161140457829003601f168201915b50505050509050919050565b600061143c600a5484846129b4565b600a600081548092919061144f90613c3c565b9190505550600a54905092915050565b60606000600a67ffffffffffffffff81111561147e5761147d612e00565b5b6040519080825280602002602001820160405280156114b157816020015b606081526020019060019003908161149c5790505b5090506000805b600d54811015611603576114cb856129fa565b80519060200120601260008381526020019081526020016000206000600281106114f8576114f7613c84565b5b016040516115069190613d56565b6040518091039020036115f0576012600082815260200190815260200160002060016002811061153957611538613c84565b5b0180546115459061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546115719061392a565b80156115be5780601f10611593576101008083540402835291602001916115be565b820191906000526020600020905b8154815290600101906020018083116115a157829003601f168201915b50505050508383815181106115d6576115d5613c84565b5b602002602001018190525081806115ec90613c3c565b9250505b80806115fb90613c3c565b9150506114b8565b508192505050919050565b600061161c60095483611864565b6009600081548092919061162f90613c3c565b91905055506009549050919050565b6018602052806000526040600020600091509050805461165d9061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546116899061392a565b80156116d65780601f106116ab576101008083540402835291602001916116d6565b820191906000526020600020905b8154815290600101906020018083116116b957829003601f168201915b505050505081565b60405180604001604052808381526020018281525060166000858152602001908152602001600020906002611714929190612c67565b506040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525060196000858152602001908152602001600020908161176a9190613b07565b50505050565b60056020528060005260406000206000915090508060000160009054906101000a900460070b908060010154905082565b6060601360008381526020019081526020016000206000600281106117c9576117c8613c84565b5b0180546117d59061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546118019061392a565b801561184e5780601f106118235761010080835404028352916020019161184e565b820191906000526020600020905b81548152906001019060200180831161183157829003601f168201915b50505050509050919050565b6000600854905090565b806017600084815260200190815260200160002090816118849190613b07565b505050565b606060008060005b600b54811015611964576118a4866129fa565b80519060200120601060008381526020019081526020016000206000600381106118d1576118d0613c84565b5b016040516118df9190613d56565b604051809103902014801561193d57506118f8856129fa565b805190602001206010600083815260200190815260200160002060016003811061192557611924613c84565b5b016040516119339190613d56565b6040518091039020145b1561195157828061194d90613c3c565b9350505b808061195c90613c3c565b915050611891565b5060008267ffffffffffffffff81111561198157611980612e00565b5b6040519080825280602002602001820160405280156119b457816020015b606081526020019060019003908161199f5790505b50905060005b600b54811015611b5b576119cd876129fa565b80519060200120601060008381526020019081526020016000206000600381106119fa576119f9613c84565b5b01604051611a089190613d56565b6040518091039020148015611a665750611a21866129fa565b8051906020012060106000838152602001908152602001600020600160038110611a4e57611a4d613c84565b5b01604051611a5c9190613d56565b6040518091039020145b15611b485760106000828152602001908152602001600020600260038110611a9157611a90613c84565b5b018054611a9d9061392a565b80601f0160208091040260200160405190810160405280929190818152602001828054611ac99061392a565b8015611b165780601f10611aeb57610100808354040283529160200191611b16565b820191906000526020600020905b815481529060010190602001808311611af957829003601f168201915b5050505050828481518110611b2e57611b2d613c84565b5b60200260200101819052508280611b4490613c3c565b9350505b8080611b5390613c3c565b9150506119ba565b5080935050505092915050565b600080600090505b600654811015611bcb57828051906020012060156000838152602001908152602001600020604051611ba29190613d56565b604051809103902003611bb85780915050611bd1565b8080611bc390613c3c565b915050611b70565b50600090505b919050565b606060008060005b600a54811015611c38578460116000838152602001908152602001600020600060028110611c0f57611c0e613c84565b5b015403611c25578280611c2190613c3c565b9350505b8080611c3090613c3c565b915050611bde565b5060008267ffffffffffffffff811115611c5557611c54612e00565b5b604051908082528060200260200182016040528015611c835781602001602082028036833780820191505090505b50905060005b600a54811015611d2a578560116000838152602001908152602001600020600060028110611cba57611cb9613c84565b5b015403611d175760116000828152602001908152602001600020600160028110611ce757611ce6613c84565b5b0154828481518110611cfc57611cfb613c84565b5b6020026020010181815250508280611d1390613c3c565b9350505b8080611d2290613c3c565b915050611c89565b50809350505050919050565b6000611d40612376565b600061080173ffffffffffffffffffffffffffffffffffffffff1663b46a8d613060046040518363ffffffff1660e01b8152600401611d80929190613e00565b6000604051808303816000875af1158015611d9f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611dc89190614011565b9050600060026000858152602001908152602001600020549050600061080073ffffffffffffffffffffffffffffffffffffffff16633edab33c306004856040518463ffffffff1660e01b8152600401611e249392919061405a565b6020604051808303816000875af1158015611e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6791906140c4565b905060405180604001604052808260070b8152602001836005600089815260200190815260200160002060010154611e9f9190613c08565b8152506005600087815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff16021790555060208201518160010155905050600083600081518110611f0a57611f09613c84565b5b602002602001015160200151905060003373ffffffffffffffffffffffffffffffffffffffff1682604051611f3e90614117565b60006040518083038185875af1925050503d8060008114611f7b576040519150601f19603f3d011682016040523d82523d6000602084013e611f80565b606091505b50509050600060026000898152602001908152602001600020819055508295505050505050919050565b611fb2612cb3565b60166000838152602001908152602001600020600280602002604051908101604052809291906000905b8282101561207f578382018054611ff29061392a565b80601f016020809104026020016040519081016040528092919081815260200182805461201e9061392a565b801561206b5780601f106120405761010080835404028352916020019161206b565b820191906000526020600020905b81548152906001019060200180831161204e57829003601f168201915b505050505081526020019060010190611fdc565b505050509050919050565b61080073ffffffffffffffffffffffffffffffffffffffff166353266bbb306004846040518463ffffffff1660e01b81526004016120ca9392919061405a565b6020604051808303816000875af11580156120e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210d91906140c4565b5050565b60095481565b60606000600a67ffffffffffffffff81111561213657612135612e00565b5b60405190808252806020026020018201604052801561216957816020015b60608152602001906001900390816121545790505b5090506000805b600d548110156122bb57612183856129fa565b80519060200120601260008381526020019081526020016000206000600281106121b0576121af613c84565b5b016040516121be9190613d56565b6040518091039020036122a857601260008281526020019081526020016000206001600281106121f1576121f0613c84565b5b0180546121fd9061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546122299061392a565b80156122765780601f1061224b57610100808354040283529160200191612276565b820191906000526020600020905b81548152906001019060200180831161225957829003601f168201915b505050505083838151811061228e5761228d613c84565b5b602002602001018190525081806122a490613c3c565b9250505b80806122b390613c3c565b915050612170565b508192505050919050565b601360205281600052604060002081600281106122e257600080fd5b016000915091505080546122f59061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546123219061392a565b801561236e5780601f106123435761010080835404028352916020019161236e565b820191906000526020600020905b81548152906001019060200180831161235157829003601f168201915b505050505081565b600061080073ffffffffffffffffffffffffffffffffffffffff1663b6039895327fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60006040518463ffffffff1660e01b81526004016123d893929190614265565b6020604051808303816000875af11580156123f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241b91906142cf565b90508061245d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245490614348565b60405180910390fd5b600061080173ffffffffffffffffffffffffffffffffffffffff16637a9841ed3260016040518363ffffffff1660e01b815260040161249d929190614368565b6020604051808303816000875af11580156124bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e091906142cf565b905080612522576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612519906143e4565b60405180910390fd5b5050565b6000612546600b5485612538866129fa565b612541866129fa565b610c45565b600b600081548092919061255990613c3c565b9190505550600b5490509392505050565b606060156000838152602001908152602001600020805461258a9061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546125b69061392a565b80156126035780601f106125d857610100808354040283529160200191612603565b820191906000526020600020905b8154815290600101906020018083116125e657829003601f168201915b50505050509050919050565b600a5481565b600080600090505b6007548110156126785782805190602001206014600083815260200190815260200160002060405161264f9190613d56565b604051809103902003612665578091505061267e565b808061267090613c3c565b91505061261d565b50600090505b919050565b6040518060400160405280612697846129fa565b815260200182815250601260008581526020019081526020016000209060026126c1929190612c67565b50505050565b600b5481565b601760205280600052604060002060009150905080546126ec9061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546127189061392a565b80156127655780601f1061273a57610100808354040283529160200191612765565b820191906000526020600020905b81548152906001019060200180831161274857829003601f168201915b505050505081565b8060146000848152602001908152602001600020908161278d9190613b07565b505050565b60006127a160085484846116de565b6127e26008546040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250610cc4565b600860008154809291906127f590613c3c565b9190505550600854905092915050565b60606000600a67ffffffffffffffff81111561282457612823612e00565b5b60405190808252806020026020018201604052801561285757816020015b60608152602001906001900390816128425790505b5090506000805b600c548110156129a957612871856129fa565b80519060200120600f600083815260200190815260200160002060006002811061289e5761289d613c84565b5b016040516128ac9190613d56565b60405180910390200361299657600f60008281526020019081526020016000206001600281106128df576128de613c84565b5b0180546128eb9061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546129179061392a565b80156129645780601f1061293957610100808354040283529160200191612964565b820191906000526020600020905b81548152906001019060200180831161294757829003601f168201915b505050505083838151811061297c5761297b613c84565b5b6020026020010181905250818061299290613c3c565b9250505b80806129a190613c3c565b91505061285e565b508192505050919050565b604051806040016040528082815260200183815250601160008581526020019081526020016000209060026129ea929190612cda565b50505050565b6000600a54905090565b606060006001612a0984612ac8565b01905060008167ffffffffffffffff811115612a2857612a27612e00565b5b6040519080825280601f01601f191660200182016040528015612a5a5781602001600182028036833780820191505090505b509050600082602001820190505b600115612abd578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612ab157612ab0614404565b5b04945060008503612a68575b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612b26577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612b1c57612b1b614404565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612b63576d04ee2d6d415b85acef81000000008381612b5957612b58614404565b5b0492506020810190505b662386f26fc100008310612b9257662386f26fc100008381612b8857612b87614404565b5b0492506010810190505b6305f5e1008310612bbb576305f5e1008381612bb157612bb0614404565b5b0492506008810190505b6127108310612be0576127108381612bd657612bd5614404565b5b0492506004810190505b60648310612c035760648381612bf957612bf8614404565b5b0492506002810190505b600a8310612c12576001810190505b80915050919050565b8260038101928215612c56579160200282015b82811115612c55578251829081612c459190613b07565b5091602001919060010190612c2e565b5b509050612c639190612d1a565b5090565b8260028101928215612ca2579160200282015b82811115612ca1578251829081612c919190613b07565b5091602001919060010190612c7a565b5b509050612caf9190612d1a565b5090565b60405180604001604052806002905b6060815260200190600190039081612cc25790505090565b8260028101928215612d09579160200282015b82811115612d08578251825591602001919060010190612ced565b5b509050612d169190612d3e565b5090565b5b80821115612d3a5760008181612d319190612d5b565b50600101612d1b565b5090565b5b80821115612d57576000816000905550600101612d3f565b5090565b508054612d679061392a565b6000825580601f10612d795750612d98565b601f016020900490600052602060002090810190612d979190612d3e565b5b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612dc281612daf565b8114612dcd57600080fd5b50565b600081359050612ddf81612db9565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612e3882612def565b810181811067ffffffffffffffff82111715612e5757612e56612e00565b5b80604052505050565b6000612e6a612d9b565b9050612e768282612e2f565b919050565b600067ffffffffffffffff821115612e9657612e95612e00565b5b612e9f82612def565b9050602081019050919050565b82818337600083830152505050565b6000612ece612ec984612e7b565b612e60565b905082815260208101848484011115612eea57612ee9612dea565b5b612ef5848285612eac565b509392505050565b600082601f830112612f1257612f11612de5565b5b8135612f22848260208601612ebb565b91505092915050565b60008060408385031215612f4257612f41612da5565b5b6000612f5085828601612dd0565b925050602083013567ffffffffffffffff811115612f7157612f70612daa565b5b612f7d85828601612efd565b9150509250929050565b60008060008060808587031215612fa157612fa0612da5565b5b6000612faf87828801612dd0565b945050602085013567ffffffffffffffff811115612fd057612fcf612daa565b5b612fdc87828801612efd565b935050604085013567ffffffffffffffff811115612ffd57612ffc612daa565b5b61300987828801612efd565b925050606085013567ffffffffffffffff81111561302a57613029612daa565b5b61303687828801612efd565b91505092959194509250565b6000806040838503121561305957613058612da5565b5b600061306785828601612dd0565b925050602061307885828601612dd0565b9150509250929050565b61308b81612daf565b82525050565b60006020820190506130a66000830184613082565b92915050565b600080600080600060a086880312156130c8576130c7612da5565b5b60006130d688828901612dd0565b955050602086013567ffffffffffffffff8111156130f7576130f6612daa565b5b61310388828901612efd565b945050604086013567ffffffffffffffff81111561312457613123612daa565b5b61313088828901612efd565b935050606061314188828901612dd0565b925050608086013567ffffffffffffffff81111561316257613161612daa565b5b61316e88828901612efd565b9150509295509295909350565b60006020828403121561319157613190612da5565b5b600082013567ffffffffffffffff8111156131af576131ae612daa565b5b6131bb84828501612efd565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561322a57808201518184015260208101905061320f565b60008484015250505050565b6000613241826131f0565b61324b81856131fb565b935061325b81856020860161320c565b61326481612def565b840191505092915050565b600061327b8383613236565b905092915050565b6000602082019050919050565b600061329b826131c4565b6132a581856131cf565b9350836020820285016132b7856131e0565b8060005b858110156132f357848403895281516132d4858261326f565b94506132df83613283565b925060208a019950506001810190506132bb565b50829750879550505050505092915050565b6000602082019050818103600083015261331f8184613290565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061335282613327565b9050919050565b61336281613347565b811461336d57600080fd5b50565b60008135905061337f81613359565b92915050565b60008060006060848603121561339e5761339d612da5565b5b60006133ac86828701613370565b935050602084013567ffffffffffffffff8111156133cd576133cc612daa565b5b6133d986828701612efd565b92505060406133ea86828701612dd0565b9150509250925092565b60008060006060848603121561340d5761340c612da5565b5b600061341b86828701612dd0565b935050602061342c86828701612dd0565b925050604084013567ffffffffffffffff81111561344d5761344c612daa565b5b61345986828701612efd565b9150509250925092565b60008115159050919050565b61347881613463565b82525050565b6000602082019050613493600083018461346f565b92915050565b6000602082840312156134af576134ae612da5565b5b60006134bd84828501612dd0565b91505092915050565b600082825260208201905092915050565b60006134e2826131f0565b6134ec81856134c6565b93506134fc81856020860161320c565b61350581612def565b840191505092915050565b6000602082019050818103600083015261352a81846134d7565b905092915050565b60008060006060848603121561354b5761354a612da5565b5b600061355986828701612dd0565b935050602084013567ffffffffffffffff81111561357a57613579612daa565b5b61358686828701612efd565b925050604084013567ffffffffffffffff8111156135a7576135a6612daa565b5b6135b386828701612efd565b9150509250925092565b60008160070b9050919050565b6135d3816135bd565b82525050565b60006040820190506135ee60008301856135ca565b6135fb6020830184613082565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61363781612daf565b82525050565b6000613649838361362e565b60208301905092915050565b6000602082019050919050565b600061366d82613602565b613677818561360d565b93506136828361361e565b8060005b838110156136b357815161369a888261363d565b97506136a583613655565b925050600181019050613686565b5085935050505092915050565b600060208201905081810360008301526136da8184613662565b905092915050565b60006020820190506136f760008301846135ca565b92915050565b600060029050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b6000613735826136fd565b61373f8185613708565b93508360208202850161375185613713565b8060005b8581101561378d578484038952815161376e858261326f565b94506137798361371d565b925060208a01995050600181019050613755565b50829750879550505050505092915050565b600060208201905081810360008301526137b9818461372a565b905092915050565b6000806000606084860312156137da576137d9612da5565b5b600084013567ffffffffffffffff8111156137f8576137f7612daa565b5b61380486828701612efd565b935050602061381586828701612dd0565b925050604061382686828701612dd0565b9150509250925092565b6000806040838503121561384757613846612da5565b5b600083013567ffffffffffffffff81111561386557613864612daa565b5b61387185828601612efd565b925050602083013567ffffffffffffffff81111561389257613891612daa565b5b61389e85828601612efd565b9150509250929050565b6000806000606084860312156138c1576138c0612da5565b5b60006138cf86828701612dd0565b93505060206138e086828701612dd0565b92505060406138f186828701612dd0565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061394257607f821691505b602082108103613955576139546138fb565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026139bd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613980565b6139c78683613980565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613a046139ff6139fa84612daf565b6139df565b612daf565b9050919050565b6000819050919050565b613a1e836139e9565b613a32613a2a82613a0b565b84845461398d565b825550505050565b600090565b613a47613a3a565b613a52818484613a15565b505050565b5b81811015613a7657613a6b600082613a3f565b600181019050613a58565b5050565b601f821115613abb57613a8c8161395b565b613a9584613970565b81016020851015613aa4578190505b613ab8613ab085613970565b830182613a57565b50505b505050565b600082821c905092915050565b6000613ade60001984600802613ac0565b1980831691505092915050565b6000613af78383613acd565b9150826002028217905092915050565b613b10826131f0565b67ffffffffffffffff811115613b2957613b28612e00565b5b613b33825461392a565b613b3e828285613a7a565b600060209050601f831160018114613b715760008415613b5f578287015190505b613b698582613aeb565b865550613bd1565b601f198416613b7f8661395b565b60005b82811015613ba757848901518255600182019150602085019450602081019050613b82565b86831015613bc45784890151613bc0601f891682613acd565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613c1382612daf565b9150613c1e83612daf565b9250828201905080821115613c3657613c35613bd9565b5b92915050565b6000613c4782612daf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c7957613c78613bd9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b60008190508160005260206000209050919050565b60008154613ce08161392a565b613cea8186613cb3565b94506001821660008114613d055760018114613d1a57613d4d565b60ff1983168652811515820286019350613d4d565b613d2385613cbe565b60005b83811015613d4557815481890152600182019150602081019050613d26565b838801955050505b50505092915050565b6000613d628284613cd3565b915081905092915050565b613d7681613347565b82525050565b60008154613d898161392a565b613d9381866134c6565b94506001821660008114613dae5760018114613dc457613df7565b60ff198316865281151560200286019350613df7565b613dcd8561395b565b60005b83811015613def57815481890152600182019150602081019050613dd0565b808801955050505b50505092915050565b6000604082019050613e156000830185613d6d565b8181036020830152613e278184613d7c565b90509392505050565b600067ffffffffffffffff821115613e4b57613e4a612e00565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b6000613e7e613e7984612e7b565b612e60565b905082815260208101848484011115613e9a57613e99612dea565b5b613ea584828561320c565b509392505050565b600082601f830112613ec257613ec1612de5565b5b8151613ed2848260208601613e6b565b91505092915050565b600081519050613eea81612db9565b92915050565b600060408284031215613f0657613f05613e61565b5b613f106040612e60565b9050600082015167ffffffffffffffff811115613f3057613f2f613e66565b5b613f3c84828501613ead565b6000830152506020613f5084828501613edb565b60208301525092915050565b6000613f6f613f6a84613e30565b612e60565b90508083825260208201905060208402830185811115613f9257613f91613e5c565b5b835b81811015613fd957805167ffffffffffffffff811115613fb757613fb6612de5565b5b808601613fc48982613ef0565b85526020850194505050602081019050613f94565b5050509392505050565b600082601f830112613ff857613ff7612de5565b5b8151614008848260208601613f5c565b91505092915050565b60006020828403121561402757614026612da5565b5b600082015167ffffffffffffffff81111561404557614044612daa565b5b61405184828501613fe3565b91505092915050565b600060608201905061406f6000830186613d6d565b81810360208301526140818185613d7c565b90506140906040830184613082565b949350505050565b6140a1816135bd565b81146140ac57600080fd5b50565b6000815190506140be81614098565b92915050565b6000602082840312156140da576140d9612da5565b5b60006140e8848285016140af565b91505092915050565b50565b6000614101600083613cb3565b915061410c826140f1565b600082019050919050565b6000614122826140f4565b9150819050919050565b600081549050919050565b60008190508160005260206000209050919050565b600081546141598161392a565b61416381866131fb565b9450600182166000811461417e5760018114614194576141c7565b60ff1983168652811515602002860193506141c7565b61419d8561395b565b60005b838110156141bf578154818901526001820191506020810190506141a0565b808801955050505b50505092915050565b60006141dc838361414c565b905092915050565b6000600182019050919050565b60006141fc8261412c565b61420681856131cf565b93508360208202850161421885614137565b8060005b858110156142535784840389528161423485826141d0565b945061423f836141e4565b925060208a0199505060018101905061421c565b50829750879550505050505092915050565b600060608201905061427a6000830186613d6d565b6142876020830185613082565b818103604083015261429981846141f1565b9050949350505050565b6142ac81613463565b81146142b757600080fd5b50565b6000815190506142c9816142a3565b92915050565b6000602082840312156142e5576142e4612da5565b5b60006142f3848285016142ba565b91505092915050565b7f5374616b696e6720417070726f7665206661696c656400000000000000000000600082015250565b60006143326016836134c6565b915061433d826142fc565b602082019050919050565b6000602082019050818103600083015261436181614325565b9050919050565b600060408201905061437d6000830185613d6d565b818103602083015261438f81846141f1565b90509392505050565b7f446973747269627574696f6e20417070726f7665206661696c65640000000000600082015250565b60006143ce601b836134c6565b91506143d982614398565b602082019050919050565b600060208201905081810360008301526143fd816143c1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea26469706673582212209f52ca110503e4efda85e8ee18cc7f27204aa01dd0ef0c33da30c41fb9aace9d64736f6c634300081100332f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e526564656c656761746565766d6f7376616c6f7065723135387777617334763666676375327833706c67373073367530666d306c6c653233376b6c74722f636f736d6f732e7374616b696e672e763162657461312e4d7367556e64656c65676174652f636f736d6f732e646973747269627574696f6e2e763162657461312e4d7367576974686472617744656c656761746f725265776172642f636f736d6f732e7374616b696e672e763162657461312e4d736744656c6567617465",
  "deployedBytecode": "0x6080604052600436106102885760003560e01c80637eadfa6a1161015a578063c08e953d116100c1578063dfc5e1691161007a578063dfc5e16914610aec578063e08033d314610b29578063e257a94c14610b52578063eb1d234d14610b8f578063f327579414610bcc578063f880eb1914610bf557610288565b8063c08e953d146109b6578063c87b56dd146109f3578063cef80b3a14610a30578063d45fc51614610a5b578063d654e99314610a98578063dcbe2ed914610ac157610288565b8063a0fd0c6a11610113578063a0fd0c6a14610894578063a694fc3a146108d1578063a99bee2e146108fa578063aed4796114610925578063b10a5dfa14610962578063b2947c711461099f57610288565b80637eadfa6a1461074c57806384eb8f6814610777578063912101cf146107a0578063932a196b146107dd57806396d5a7391461081a5780639c6353e81461085757610288565b80633592dd80116101fe5780635154380a116101b75780635154380a146105f1578063523796271461062e57806353c227cc1461066b57806361958158146106a85780637495f854146106d15780637cedbc1e1461070f57610288565b80633592dd801461049757806339053271146104c0578063414d9a2b146104fd578063446a92e31461053a5780634eb083ec146105775780634ef4e80f146105b457610288565b806318160ddd1161025057806318160ddd1461034f5780631dacc07e1461037a5780631e65e117146103a357806328520ab7146103e0578063304b16db1461041d57806335011d901461045a57610288565b8063015388681461028d5780630ae240cf146102b65780630cdd53f6146102df578063144cbca6146102fb5780631677bf0814610326575b600080fd5b34801561029957600080fd5b506102b460048036038101906102af9190612f2b565b610c20565b005b3480156102c257600080fd5b506102dd60048036038101906102d89190612f87565b610c45565b005b6102f960048036038101906102f49190613042565b610c88565b005b34801561030757600080fd5b50610310610cbe565b60405161031d9190613091565b60405180910390f35b34801561033257600080fd5b5061034d60048036038101906103489190612f2b565b610cc4565b005b34801561035b57600080fd5b50610364610ce9565b6040516103719190613091565b60405180910390f35b34801561038657600080fd5b506103a1600480360381019061039c91906130ac565b610cf3565b005b3480156103af57600080fd5b506103ca60048036038101906103c5919061317b565b610e17565b6040516103d79190613305565b60405180910390f35b3480156103ec57600080fd5b5061040760048036038101906104029190612f2b565b611039565b6040516104149190613091565b60405180910390f35b34801561042957600080fd5b50610444600480360381019061043f919061317b565b611112565b6040516104519190613091565b60405180910390f35b34801561046657600080fd5b50610481600480360381019061047c9190613385565b611194565b60405161048e9190613091565b60405180910390f35b3480156104a357600080fd5b506104be60048036038101906104b991906133f4565b6111eb565b005b3480156104cc57600080fd5b506104e760048036038101906104e29190613042565b61122f565b6040516104f4919061347e565b60405180910390f35b34801561050957600080fd5b50610524600480360381019061051f9190613499565b6112cb565b6040516105319190613091565b60405180910390f35b34801561054657600080fd5b50610561600480360381019061055c9190613499565b6112e3565b60405161056e9190613510565b60405180910390f35b34801561058357600080fd5b5061059e60048036038101906105999190613499565b611388565b6040516105ab9190613510565b60405180910390f35b3480156105c057600080fd5b506105db60048036038101906105d69190613042565b61142d565b6040516105e89190613091565b60405180910390f35b3480156105fd57600080fd5b5061061860048036038101906106139190613499565b61145f565b6040516106259190613305565b60405180910390f35b34801561063a57600080fd5b506106556004803603810190610650919061317b565b61160e565b6040516106629190613091565b60405180910390f35b34801561067757600080fd5b50610692600480360381019061068d9190613499565b61163e565b60405161069f9190613510565b60405180910390f35b3480156106b457600080fd5b506106cf60048036038101906106ca9190613532565b6116de565b005b3480156106dd57600080fd5b506106f860048036038101906106f39190613499565b611770565b6040516107069291906135d9565b60405180910390f35b34801561071b57600080fd5b5061073660048036038101906107319190613499565b6117a1565b6040516107439190613510565b60405180910390f35b34801561075857600080fd5b5061076161185a565b60405161076e9190613091565b60405180910390f35b34801561078357600080fd5b5061079e60048036038101906107999190612f2b565b611864565b005b3480156107ac57600080fd5b506107c760048036038101906107c29190613042565b611889565b6040516107d49190613305565b60405180910390f35b3480156107e957600080fd5b5061080460048036038101906107ff919061317b565b611b68565b6040516108119190613091565b60405180910390f35b34801561082657600080fd5b50610841600480360381019061083c9190613499565b611bd6565b60405161084e91906136c0565b60405180910390f35b34801561086357600080fd5b5061087e60048036038101906108799190613499565b611d36565b60405161088b91906136e2565b60405180910390f35b3480156108a057600080fd5b506108bb60048036038101906108b69190613499565b611faa565b6040516108c8919061379f565b60405180910390f35b3480156108dd57600080fd5b506108f860048036038101906108f39190613499565b61208a565b005b34801561090657600080fd5b5061090f612111565b60405161091c9190613091565b60405180910390f35b34801561093157600080fd5b5061094c60048036038101906109479190613499565b612117565b6040516109599190613305565b60405180910390f35b34801561096e57600080fd5b5061098960048036038101906109849190613042565b6122c6565b6040516109969190613510565b60405180910390f35b3480156109ab57600080fd5b506109b4612376565b005b3480156109c257600080fd5b506109dd60048036038101906109d891906137c1565b612526565b6040516109ea9190613091565b60405180910390f35b3480156109ff57600080fd5b50610a1a6004803603810190610a159190613499565b61256a565b604051610a279190613510565b60405180910390f35b348015610a3c57600080fd5b50610a4561260f565b604051610a529190613091565b60405180910390f35b348015610a6757600080fd5b50610a826004803603810190610a7d919061317b565b612615565b604051610a8f9190613091565b60405180910390f35b348015610aa457600080fd5b50610abf6004803603810190610aba91906133f4565b612683565b005b348015610acd57600080fd5b50610ad66126c7565b604051610ae39190613091565b60405180910390f35b348015610af857600080fd5b50610b136004803603810190610b0e9190613499565b6126cd565b604051610b209190613510565b60405180910390f35b348015610b3557600080fd5b50610b506004803603810190610b4b9190612f2b565b61276d565b005b348015610b5e57600080fd5b50610b796004803603810190610b749190613830565b612792565b604051610b869190613091565b60405180910390f35b348015610b9b57600080fd5b50610bb66004803603810190610bb19190613499565b612805565b604051610bc39190613305565b60405180910390f35b348015610bd857600080fd5b50610bf36004803603810190610bee91906138a8565b6129b4565b005b348015610c0157600080fd5b50610c0a6129f0565b604051610c179190613091565b60405180910390f35b80601560008481526020019081526020016000209081610c409190613b07565b505050565b60405180606001604052808281526020018381526020018481525060106000868152602001908152602001600020906003610c81929190612c1b565b5050505050565b610c90612376565b80600260008481526020019081526020016000206000828254610cb39190613c08565b925050819055505050565b600e5481565b80601960008481526020019081526020016000209081610ce49190613b07565b505050565b6000600654905090565b6000610d9a83601560008981526020019081526020016000208054610d179061392a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d439061392a565b8015610d905780601f10610d6557610100808354040283529160200191610d90565b820191906000526020600020905b815481529060010190602001808311610d7357829003601f168201915b5050505050611039565b905083601560008881526020019081526020016000209081610dbc9190613b07565b50610dc88184866111eb565b610dd28383610cc4565b610ddf600d548787612683565b600d6000815480929190610df290613c3c565b919050555060076000815480929190610e0a90613c3c565b9190505550505050505050565b606060008060005b600854811015610e9457848051906020012060166000838152602001908152602001600020600060028110610e5757610e56613c84565b5b01604051610e659190613d56565b604051809103902003610e81578280610e7d90613c3c565b9350505b8080610e8c90613c3c565b915050610e1f565b5060008267ffffffffffffffff811115610eb157610eb0612e00565b5b604051908082528060200260200182016040528015610ee457816020015b6060815260200190600190039081610ecf5790505b50905060005b60085481101561102d57858051906020012060166000838152602001908152602001600020600060028110610f2257610f21613c84565b5b01604051610f309190613d56565b60405180910390200361101a5760166000828152602001908152602001600020600160028110610f6357610f62613c84565b5b018054610f6f9061392a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9b9061392a565b8015610fe85780601f10610fbd57610100808354040283529160200191610fe8565b820191906000526020600020905b815481529060010190602001808311610fcb57829003601f168201915b505050505082848151811061100057610fff613c84565b5b6020026020010181905250828061101690613c3c565b9350505b808061102590613c3c565b915050610eea565b50809350505050919050565b600080600090505b600c5481101561110657611054846129fa565b80519060200120600f600083815260200190815260200160002060006002811061108157611080613c84565b5b0160405161108f9190613d56565b60405180910390201480156110e557508280519060200120600f60008381526020019081526020016000206001600281106110cd576110cc613c84565b5b016040516110db9190613d56565b6040518091039020145b156110f3578091505061110c565b80806110fe90613c3c565b915050611041565b50600090505b92915050565b600080600090505b6008548110156111895782805190602001206016600083815260200190815260200160002060016002811061115257611151613c84565b5b016040516111609190613d56565b604051809103902003611176578091505061118f565b808061118190613c3c565b91505061111a565b50600090505b919050565b60006111a260065484610c20565b6111af600c5483856111eb565b600660008154809291906111c290613c3c565b9190505550600c60008154809291906111da90613c3c565b919050555060065490509392505050565b60405180604001604052806111ff846129fa565b815260200182815250600f6000858152602001908152602001600020906002611229929190612c67565b50505050565b600080600090505b600a548110156112bf57836011600083815260200190815260200160002060006002811061126857611267613c84565b5b015414801561129d5750826011600083815260200190815260200160002060016002811061129957611298613c84565b5b0154145b156112ac5760019150506112c5565b80806112b790613c3c565b915050611237565b50600090505b92915050565b60026020528060005260406000206000915090505481565b60606014600083815260200190815260200160002080546113039061392a565b80601f016020809104026020016040519081016040528092919081815260200182805461132f9061392a565b801561137c5780601f106113515761010080835404028352916020019161137c565b820191906000526020600020905b81548152906001019060200180831161135f57829003601f168201915b50505050509050919050565b60606019600083815260200190815260200160002080546113a89061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546113d49061392a565b80156114215780601f106113f657610100808354040283529160200191611421565b820191906000526020600020905b81548152906001019060200180831161140457829003601f168201915b50505050509050919050565b600061143c600a5484846129b4565b600a600081548092919061144f90613c3c565b9190505550600a54905092915050565b60606000600a67ffffffffffffffff81111561147e5761147d612e00565b5b6040519080825280602002602001820160405280156114b157816020015b606081526020019060019003908161149c5790505b5090506000805b600d54811015611603576114cb856129fa565b80519060200120601260008381526020019081526020016000206000600281106114f8576114f7613c84565b5b016040516115069190613d56565b6040518091039020036115f0576012600082815260200190815260200160002060016002811061153957611538613c84565b5b0180546115459061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546115719061392a565b80156115be5780601f10611593576101008083540402835291602001916115be565b820191906000526020600020905b8154815290600101906020018083116115a157829003601f168201915b50505050508383815181106115d6576115d5613c84565b5b602002602001018190525081806115ec90613c3c565b9250505b80806115fb90613c3c565b9150506114b8565b508192505050919050565b600061161c60095483611864565b6009600081548092919061162f90613c3c565b91905055506009549050919050565b6018602052806000526040600020600091509050805461165d9061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546116899061392a565b80156116d65780601f106116ab576101008083540402835291602001916116d6565b820191906000526020600020905b8154815290600101906020018083116116b957829003601f168201915b505050505081565b60405180604001604052808381526020018281525060166000858152602001908152602001600020906002611714929190612c67565b506040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525060196000858152602001908152602001600020908161176a9190613b07565b50505050565b60056020528060005260406000206000915090508060000160009054906101000a900460070b908060010154905082565b6060601360008381526020019081526020016000206000600281106117c9576117c8613c84565b5b0180546117d59061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546118019061392a565b801561184e5780601f106118235761010080835404028352916020019161184e565b820191906000526020600020905b81548152906001019060200180831161183157829003601f168201915b50505050509050919050565b6000600854905090565b806017600084815260200190815260200160002090816118849190613b07565b505050565b606060008060005b600b54811015611964576118a4866129fa565b80519060200120601060008381526020019081526020016000206000600381106118d1576118d0613c84565b5b016040516118df9190613d56565b604051809103902014801561193d57506118f8856129fa565b805190602001206010600083815260200190815260200160002060016003811061192557611924613c84565b5b016040516119339190613d56565b6040518091039020145b1561195157828061194d90613c3c565b9350505b808061195c90613c3c565b915050611891565b5060008267ffffffffffffffff81111561198157611980612e00565b5b6040519080825280602002602001820160405280156119b457816020015b606081526020019060019003908161199f5790505b50905060005b600b54811015611b5b576119cd876129fa565b80519060200120601060008381526020019081526020016000206000600381106119fa576119f9613c84565b5b01604051611a089190613d56565b6040518091039020148015611a665750611a21866129fa565b8051906020012060106000838152602001908152602001600020600160038110611a4e57611a4d613c84565b5b01604051611a5c9190613d56565b6040518091039020145b15611b485760106000828152602001908152602001600020600260038110611a9157611a90613c84565b5b018054611a9d9061392a565b80601f0160208091040260200160405190810160405280929190818152602001828054611ac99061392a565b8015611b165780601f10611aeb57610100808354040283529160200191611b16565b820191906000526020600020905b815481529060010190602001808311611af957829003601f168201915b5050505050828481518110611b2e57611b2d613c84565b5b60200260200101819052508280611b4490613c3c565b9350505b8080611b5390613c3c565b9150506119ba565b5080935050505092915050565b600080600090505b600654811015611bcb57828051906020012060156000838152602001908152602001600020604051611ba29190613d56565b604051809103902003611bb85780915050611bd1565b8080611bc390613c3c565b915050611b70565b50600090505b919050565b606060008060005b600a54811015611c38578460116000838152602001908152602001600020600060028110611c0f57611c0e613c84565b5b015403611c25578280611c2190613c3c565b9350505b8080611c3090613c3c565b915050611bde565b5060008267ffffffffffffffff811115611c5557611c54612e00565b5b604051908082528060200260200182016040528015611c835781602001602082028036833780820191505090505b50905060005b600a54811015611d2a578560116000838152602001908152602001600020600060028110611cba57611cb9613c84565b5b015403611d175760116000828152602001908152602001600020600160028110611ce757611ce6613c84565b5b0154828481518110611cfc57611cfb613c84565b5b6020026020010181815250508280611d1390613c3c565b9350505b8080611d2290613c3c565b915050611c89565b50809350505050919050565b6000611d40612376565b600061080173ffffffffffffffffffffffffffffffffffffffff1663b46a8d613060046040518363ffffffff1660e01b8152600401611d80929190613e00565b6000604051808303816000875af1158015611d9f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611dc89190614011565b9050600060026000858152602001908152602001600020549050600061080073ffffffffffffffffffffffffffffffffffffffff16633edab33c306004856040518463ffffffff1660e01b8152600401611e249392919061405a565b6020604051808303816000875af1158015611e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6791906140c4565b905060405180604001604052808260070b8152602001836005600089815260200190815260200160002060010154611e9f9190613c08565b8152506005600087815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff16021790555060208201518160010155905050600083600081518110611f0a57611f09613c84565b5b602002602001015160200151905060003373ffffffffffffffffffffffffffffffffffffffff1682604051611f3e90614117565b60006040518083038185875af1925050503d8060008114611f7b576040519150601f19603f3d011682016040523d82523d6000602084013e611f80565b606091505b50509050600060026000898152602001908152602001600020819055508295505050505050919050565b611fb2612cb3565b60166000838152602001908152602001600020600280602002604051908101604052809291906000905b8282101561207f578382018054611ff29061392a565b80601f016020809104026020016040519081016040528092919081815260200182805461201e9061392a565b801561206b5780601f106120405761010080835404028352916020019161206b565b820191906000526020600020905b81548152906001019060200180831161204e57829003601f168201915b505050505081526020019060010190611fdc565b505050509050919050565b61080073ffffffffffffffffffffffffffffffffffffffff166353266bbb306004846040518463ffffffff1660e01b81526004016120ca9392919061405a565b6020604051808303816000875af11580156120e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210d91906140c4565b5050565b60095481565b60606000600a67ffffffffffffffff81111561213657612135612e00565b5b60405190808252806020026020018201604052801561216957816020015b60608152602001906001900390816121545790505b5090506000805b600d548110156122bb57612183856129fa565b80519060200120601260008381526020019081526020016000206000600281106121b0576121af613c84565b5b016040516121be9190613d56565b6040518091039020036122a857601260008281526020019081526020016000206001600281106121f1576121f0613c84565b5b0180546121fd9061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546122299061392a565b80156122765780601f1061224b57610100808354040283529160200191612276565b820191906000526020600020905b81548152906001019060200180831161225957829003601f168201915b505050505083838151811061228e5761228d613c84565b5b602002602001018190525081806122a490613c3c565b9250505b80806122b390613c3c565b915050612170565b508192505050919050565b601360205281600052604060002081600281106122e257600080fd5b016000915091505080546122f59061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546123219061392a565b801561236e5780601f106123435761010080835404028352916020019161236e565b820191906000526020600020905b81548152906001019060200180831161235157829003601f168201915b505050505081565b600061080073ffffffffffffffffffffffffffffffffffffffff1663b6039895327fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60006040518463ffffffff1660e01b81526004016123d893929190614265565b6020604051808303816000875af11580156123f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241b91906142cf565b90508061245d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245490614348565b60405180910390fd5b600061080173ffffffffffffffffffffffffffffffffffffffff16637a9841ed3260016040518363ffffffff1660e01b815260040161249d929190614368565b6020604051808303816000875af11580156124bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e091906142cf565b905080612522576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612519906143e4565b60405180910390fd5b5050565b6000612546600b5485612538866129fa565b612541866129fa565b610c45565b600b600081548092919061255990613c3c565b9190505550600b5490509392505050565b606060156000838152602001908152602001600020805461258a9061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546125b69061392a565b80156126035780601f106125d857610100808354040283529160200191612603565b820191906000526020600020905b8154815290600101906020018083116125e657829003601f168201915b50505050509050919050565b600a5481565b600080600090505b6007548110156126785782805190602001206014600083815260200190815260200160002060405161264f9190613d56565b604051809103902003612665578091505061267e565b808061267090613c3c565b91505061261d565b50600090505b919050565b6040518060400160405280612697846129fa565b815260200182815250601260008581526020019081526020016000209060026126c1929190612c67565b50505050565b600b5481565b601760205280600052604060002060009150905080546126ec9061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546127189061392a565b80156127655780601f1061273a57610100808354040283529160200191612765565b820191906000526020600020905b81548152906001019060200180831161274857829003601f168201915b505050505081565b8060146000848152602001908152602001600020908161278d9190613b07565b505050565b60006127a160085484846116de565b6127e26008546040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250610cc4565b600860008154809291906127f590613c3c565b9190505550600854905092915050565b60606000600a67ffffffffffffffff81111561282457612823612e00565b5b60405190808252806020026020018201604052801561285757816020015b60608152602001906001900390816128425790505b5090506000805b600c548110156129a957612871856129fa565b80519060200120600f600083815260200190815260200160002060006002811061289e5761289d613c84565b5b016040516128ac9190613d56565b60405180910390200361299657600f60008281526020019081526020016000206001600281106128df576128de613c84565b5b0180546128eb9061392a565b80601f01602080910402602001604051908101604052809291908181526020018280546129179061392a565b80156129645780601f1061293957610100808354040283529160200191612964565b820191906000526020600020905b81548152906001019060200180831161294757829003601f168201915b505050505083838151811061297c5761297b613c84565b5b6020026020010181905250818061299290613c3c565b9250505b80806129a190613c3c565b91505061285e565b508192505050919050565b604051806040016040528082815260200183815250601160008581526020019081526020016000209060026129ea929190612cda565b50505050565b6000600a54905090565b606060006001612a0984612ac8565b01905060008167ffffffffffffffff811115612a2857612a27612e00565b5b6040519080825280601f01601f191660200182016040528015612a5a5781602001600182028036833780820191505090505b509050600082602001820190505b600115612abd578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612ab157612ab0614404565b5b04945060008503612a68575b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612b26577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612b1c57612b1b614404565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612b63576d04ee2d6d415b85acef81000000008381612b5957612b58614404565b5b0492506020810190505b662386f26fc100008310612b9257662386f26fc100008381612b8857612b87614404565b5b0492506010810190505b6305f5e1008310612bbb576305f5e1008381612bb157612bb0614404565b5b0492506008810190505b6127108310612be0576127108381612bd657612bd5614404565b5b0492506004810190505b60648310612c035760648381612bf957612bf8614404565b5b0492506002810190505b600a8310612c12576001810190505b80915050919050565b8260038101928215612c56579160200282015b82811115612c55578251829081612c459190613b07565b5091602001919060010190612c2e565b5b509050612c639190612d1a565b5090565b8260028101928215612ca2579160200282015b82811115612ca1578251829081612c919190613b07565b5091602001919060010190612c7a565b5b509050612caf9190612d1a565b5090565b60405180604001604052806002905b6060815260200190600190039081612cc25790505090565b8260028101928215612d09579160200282015b82811115612d08578251825591602001919060010190612ced565b5b509050612d169190612d3e565b5090565b5b80821115612d3a5760008181612d319190612d5b565b50600101612d1b565b5090565b5b80821115612d57576000816000905550600101612d3f565b5090565b508054612d679061392a565b6000825580601f10612d795750612d98565b601f016020900490600052602060002090810190612d979190612d3e565b5b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612dc281612daf565b8114612dcd57600080fd5b50565b600081359050612ddf81612db9565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612e3882612def565b810181811067ffffffffffffffff82111715612e5757612e56612e00565b5b80604052505050565b6000612e6a612d9b565b9050612e768282612e2f565b919050565b600067ffffffffffffffff821115612e9657612e95612e00565b5b612e9f82612def565b9050602081019050919050565b82818337600083830152505050565b6000612ece612ec984612e7b565b612e60565b905082815260208101848484011115612eea57612ee9612dea565b5b612ef5848285612eac565b509392505050565b600082601f830112612f1257612f11612de5565b5b8135612f22848260208601612ebb565b91505092915050565b60008060408385031215612f4257612f41612da5565b5b6000612f5085828601612dd0565b925050602083013567ffffffffffffffff811115612f7157612f70612daa565b5b612f7d85828601612efd565b9150509250929050565b60008060008060808587031215612fa157612fa0612da5565b5b6000612faf87828801612dd0565b945050602085013567ffffffffffffffff811115612fd057612fcf612daa565b5b612fdc87828801612efd565b935050604085013567ffffffffffffffff811115612ffd57612ffc612daa565b5b61300987828801612efd565b925050606085013567ffffffffffffffff81111561302a57613029612daa565b5b61303687828801612efd565b91505092959194509250565b6000806040838503121561305957613058612da5565b5b600061306785828601612dd0565b925050602061307885828601612dd0565b9150509250929050565b61308b81612daf565b82525050565b60006020820190506130a66000830184613082565b92915050565b600080600080600060a086880312156130c8576130c7612da5565b5b60006130d688828901612dd0565b955050602086013567ffffffffffffffff8111156130f7576130f6612daa565b5b61310388828901612efd565b945050604086013567ffffffffffffffff81111561312457613123612daa565b5b61313088828901612efd565b935050606061314188828901612dd0565b925050608086013567ffffffffffffffff81111561316257613161612daa565b5b61316e88828901612efd565b9150509295509295909350565b60006020828403121561319157613190612da5565b5b600082013567ffffffffffffffff8111156131af576131ae612daa565b5b6131bb84828501612efd565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561322a57808201518184015260208101905061320f565b60008484015250505050565b6000613241826131f0565b61324b81856131fb565b935061325b81856020860161320c565b61326481612def565b840191505092915050565b600061327b8383613236565b905092915050565b6000602082019050919050565b600061329b826131c4565b6132a581856131cf565b9350836020820285016132b7856131e0565b8060005b858110156132f357848403895281516132d4858261326f565b94506132df83613283565b925060208a019950506001810190506132bb565b50829750879550505050505092915050565b6000602082019050818103600083015261331f8184613290565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061335282613327565b9050919050565b61336281613347565b811461336d57600080fd5b50565b60008135905061337f81613359565b92915050565b60008060006060848603121561339e5761339d612da5565b5b60006133ac86828701613370565b935050602084013567ffffffffffffffff8111156133cd576133cc612daa565b5b6133d986828701612efd565b92505060406133ea86828701612dd0565b9150509250925092565b60008060006060848603121561340d5761340c612da5565b5b600061341b86828701612dd0565b935050602061342c86828701612dd0565b925050604084013567ffffffffffffffff81111561344d5761344c612daa565b5b61345986828701612efd565b9150509250925092565b60008115159050919050565b61347881613463565b82525050565b6000602082019050613493600083018461346f565b92915050565b6000602082840312156134af576134ae612da5565b5b60006134bd84828501612dd0565b91505092915050565b600082825260208201905092915050565b60006134e2826131f0565b6134ec81856134c6565b93506134fc81856020860161320c565b61350581612def565b840191505092915050565b6000602082019050818103600083015261352a81846134d7565b905092915050565b60008060006060848603121561354b5761354a612da5565b5b600061355986828701612dd0565b935050602084013567ffffffffffffffff81111561357a57613579612daa565b5b61358686828701612efd565b925050604084013567ffffffffffffffff8111156135a7576135a6612daa565b5b6135b386828701612efd565b9150509250925092565b60008160070b9050919050565b6135d3816135bd565b82525050565b60006040820190506135ee60008301856135ca565b6135fb6020830184613082565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61363781612daf565b82525050565b6000613649838361362e565b60208301905092915050565b6000602082019050919050565b600061366d82613602565b613677818561360d565b93506136828361361e565b8060005b838110156136b357815161369a888261363d565b97506136a583613655565b925050600181019050613686565b5085935050505092915050565b600060208201905081810360008301526136da8184613662565b905092915050565b60006020820190506136f760008301846135ca565b92915050565b600060029050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b6000613735826136fd565b61373f8185613708565b93508360208202850161375185613713565b8060005b8581101561378d578484038952815161376e858261326f565b94506137798361371d565b925060208a01995050600181019050613755565b50829750879550505050505092915050565b600060208201905081810360008301526137b9818461372a565b905092915050565b6000806000606084860312156137da576137d9612da5565b5b600084013567ffffffffffffffff8111156137f8576137f7612daa565b5b61380486828701612efd565b935050602061381586828701612dd0565b925050604061382686828701612dd0565b9150509250925092565b6000806040838503121561384757613846612da5565b5b600083013567ffffffffffffffff81111561386557613864612daa565b5b61387185828601612efd565b925050602083013567ffffffffffffffff81111561389257613891612daa565b5b61389e85828601612efd565b9150509250929050565b6000806000606084860312156138c1576138c0612da5565b5b60006138cf86828701612dd0565b93505060206138e086828701612dd0565b92505060406138f186828701612dd0565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061394257607f821691505b602082108103613955576139546138fb565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026139bd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613980565b6139c78683613980565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613a046139ff6139fa84612daf565b6139df565b612daf565b9050919050565b6000819050919050565b613a1e836139e9565b613a32613a2a82613a0b565b84845461398d565b825550505050565b600090565b613a47613a3a565b613a52818484613a15565b505050565b5b81811015613a7657613a6b600082613a3f565b600181019050613a58565b5050565b601f821115613abb57613a8c8161395b565b613a9584613970565b81016020851015613aa4578190505b613ab8613ab085613970565b830182613a57565b50505b505050565b600082821c905092915050565b6000613ade60001984600802613ac0565b1980831691505092915050565b6000613af78383613acd565b9150826002028217905092915050565b613b10826131f0565b67ffffffffffffffff811115613b2957613b28612e00565b5b613b33825461392a565b613b3e828285613a7a565b600060209050601f831160018114613b715760008415613b5f578287015190505b613b698582613aeb565b865550613bd1565b601f198416613b7f8661395b565b60005b82811015613ba757848901518255600182019150602085019450602081019050613b82565b86831015613bc45784890151613bc0601f891682613acd565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613c1382612daf565b9150613c1e83612daf565b9250828201905080821115613c3657613c35613bd9565b5b92915050565b6000613c4782612daf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c7957613c78613bd9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b60008190508160005260206000209050919050565b60008154613ce08161392a565b613cea8186613cb3565b94506001821660008114613d055760018114613d1a57613d4d565b60ff1983168652811515820286019350613d4d565b613d2385613cbe565b60005b83811015613d4557815481890152600182019150602081019050613d26565b838801955050505b50505092915050565b6000613d628284613cd3565b915081905092915050565b613d7681613347565b82525050565b60008154613d898161392a565b613d9381866134c6565b94506001821660008114613dae5760018114613dc457613df7565b60ff198316865281151560200286019350613df7565b613dcd8561395b565b60005b83811015613def57815481890152600182019150602081019050613dd0565b808801955050505b50505092915050565b6000604082019050613e156000830185613d6d565b8181036020830152613e278184613d7c565b90509392505050565b600067ffffffffffffffff821115613e4b57613e4a612e00565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b6000613e7e613e7984612e7b565b612e60565b905082815260208101848484011115613e9a57613e99612dea565b5b613ea584828561320c565b509392505050565b600082601f830112613ec257613ec1612de5565b5b8151613ed2848260208601613e6b565b91505092915050565b600081519050613eea81612db9565b92915050565b600060408284031215613f0657613f05613e61565b5b613f106040612e60565b9050600082015167ffffffffffffffff811115613f3057613f2f613e66565b5b613f3c84828501613ead565b6000830152506020613f5084828501613edb565b60208301525092915050565b6000613f6f613f6a84613e30565b612e60565b90508083825260208201905060208402830185811115613f9257613f91613e5c565b5b835b81811015613fd957805167ffffffffffffffff811115613fb757613fb6612de5565b5b808601613fc48982613ef0565b85526020850194505050602081019050613f94565b5050509392505050565b600082601f830112613ff857613ff7612de5565b5b8151614008848260208601613f5c565b91505092915050565b60006020828403121561402757614026612da5565b5b600082015167ffffffffffffffff81111561404557614044612daa565b5b61405184828501613fe3565b91505092915050565b600060608201905061406f6000830186613d6d565b81810360208301526140818185613d7c565b90506140906040830184613082565b949350505050565b6140a1816135bd565b81146140ac57600080fd5b50565b6000815190506140be81614098565b92915050565b6000602082840312156140da576140d9612da5565b5b60006140e8848285016140af565b91505092915050565b50565b6000614101600083613cb3565b915061410c826140f1565b600082019050919050565b6000614122826140f4565b9150819050919050565b600081549050919050565b60008190508160005260206000209050919050565b600081546141598161392a565b61416381866131fb565b9450600182166000811461417e5760018114614194576141c7565b60ff1983168652811515602002860193506141c7565b61419d8561395b565b60005b838110156141bf578154818901526001820191506020810190506141a0565b808801955050505b50505092915050565b60006141dc838361414c565b905092915050565b6000600182019050919050565b60006141fc8261412c565b61420681856131cf565b93508360208202850161421885614137565b8060005b858110156142535784840389528161423485826141d0565b945061423f836141e4565b925060208a0199505060018101905061421c565b50829750879550505050505092915050565b600060608201905061427a6000830186613d6d565b6142876020830185613082565b818103604083015261429981846141f1565b9050949350505050565b6142ac81613463565b81146142b757600080fd5b50565b6000815190506142c9816142a3565b92915050565b6000602082840312156142e5576142e4612da5565b5b60006142f3848285016142ba565b91505092915050565b7f5374616b696e6720417070726f7665206661696c656400000000000000000000600082015250565b60006143326016836134c6565b915061433d826142fc565b602082019050919050565b6000602082019050818103600083015261436181614325565b9050919050565b600060408201905061437d6000830185613d6d565b818103602083015261438f81846141f1565b90509392505050565b7f446973747269627574696f6e20417070726f7665206661696c65640000000000600082015250565b60006143ce601b836134c6565b91506143d982614398565b602082019050919050565b600060208201905081810360008301526143fd816143c1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea26469706673582212209f52ca110503e4efda85e8ee18cc7f27204aa01dd0ef0c33da30c41fb9aace9d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_approveRequiredMsgs()": {
        "details": "approves the staking and distribution contracts for donating"
      }
    },
    "stateVariables": {
      "donated": {
        "details": "map to keep track of user deposits to the contract."
      },
      "stakingMethods": {
        "details": "the required authorizations for Staking and Distribution"
      },
      "unbondingDelegations": {
        "details": "map that keeps track of all currently unbonding delegations"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1217,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "stakingMethods",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 1222,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "distributionMethods",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 1227,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "donated",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1229,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_total_delegations",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1232,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_validatorAddr",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1238,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "unbondingDelegations",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(UnbondingRequest)1209_storage)"
      },
      {
        "astId": 1240,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1242,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_bidIds",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1244,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_eventIds",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1246,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_GrantEventIds",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1248,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_GrantProjectIds",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1250,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_GrantVoteIds",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1252,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_EventTokenIds",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1254,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_TokenBidIds",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1256,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_EventTokenSearchIds",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1262,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "AllEventTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1268,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "AllGrantVotes",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)3_storage)"
      },
      {
        "astId": 1274,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "AllGrantProject",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 1280,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "AllTokensBids",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1286,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_SearchedStore",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1290,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_bidURIs",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1294,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1300,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_eventURIs",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1304,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_GrantEventURIs",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1308,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_JudgerURIs",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1312,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_eventRaised",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1316,
        "contract": "contracts/DemeterGift.sol:DemeterGift",
        "label": "_eventTokens",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      }
    ],
    "types": {
      "t_array(t_string_storage)2_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_string_storage)3_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_int64": {
        "encoding": "inplace",
        "label": "int64",
        "numberOfBytes": "8"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)2_storage"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)3_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)3_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(UnbondingRequest)1209_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DemeterGift.UnbondingRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(UnbondingRequest)1209_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(UnbondingRequest)1209_storage": {
        "encoding": "inplace",
        "label": "struct DemeterGift.UnbondingRequest",
        "members": [
          {
            "astId": 1206,
            "contract": "contracts/DemeterGift.sol:DemeterGift",
            "label": "completionTime",
            "offset": 0,
            "slot": "0",
            "type": "t_int64"
          },
          {
            "astId": 1208,
            "contract": "contracts/DemeterGift.sol:DemeterGift",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}