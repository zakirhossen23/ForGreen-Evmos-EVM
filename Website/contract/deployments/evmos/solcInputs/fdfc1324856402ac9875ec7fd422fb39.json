{
  "language": "Solidity",
  "sources": {
    "contracts/DemeterGift.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract DemeterGift{\r\n\r\n\tuint256 private _tokenIds;\r\n\tuint256 private _bidIds;\r\n\tuint256 private _eventIds;\r\n    uint256 public _GrantEventIds;\r\n\tuint256 public _GrantProjectIds;\r\n\tuint256 public _GrantVoteIds;\r\n\tuint256 private _EventTokenIds;\r\n\tuint256 private _TokenBidIds;\r\n\tuint256 public _EventTokenSearchIds;\r\n\tmapping(uint256 => string[2]) private AllEventTokens;\r\n\tmapping(uint256 => string[3]) private AllGrantVotes;\r\n    mapping(uint256 => uint256[2]) private AllGrantProject;\r\n\tmapping(uint256 => string[2]) private AllTokensBids;\r\n\tmapping(uint256 => string[2]) public _SearchedStore;\r\n\tmapping(uint256 => string) private _bidURIs;\r\n\tmapping(uint256 => string) private _tokenURIs;\r\n\tmapping(uint256 => string[2]) private _eventURIs;\r\n\tmapping(uint256 => string) public _GrantEventURIs;\r\n    mapping(uint256 => string) public  _JudgerURIs;\r\n\tmapping(uint256 => string) private _eventRaised;\r\n\tmapping(string => string) private _eventTokens;\r\n\r\n\r\nfunction claimToken(\r\n\t\taddress _claimer,\r\n\t\tstring memory _tokenURI,\r\n\t\tuint256 _eventid\r\n\t) public returns (uint256) {\r\n\t\t_setTokenURI(_tokenIds, _tokenURI);\r\n\t\t_setTokenEvent(_EventTokenIds, _eventid, _tokenURI);\r\n\t\t_tokenIds++;\r\n\t\t_EventTokenIds++;\r\n\t\treturn _tokenIds;\r\n\t}\r\n\r\n\r\nfunction _setTokenEvent(\r\n\t\tuint256 EventTokenId,\r\n\t\tuint256 EventId,\r\n\t\tstring memory _tokenURI\r\n\t) public virtual {\r\n\t\tAllEventTokens[EventTokenId] = [\r\n\t\t\tStrings.toString(EventId),\r\n\t\t\tstring(_tokenURI)\r\n\t\t];\r\n\t}\r\nfunction createEvent(string memory _eventWallet,string memory _eventURI)\r\n\t\tpublic\r\n\t\treturns (uint256)\r\n\t{\r\n\t\t_setEventURI(_eventIds,_eventWallet, _eventURI);\r\n\t\t_setEventRaised(_eventIds, \"0\");\r\n\t\t_eventIds++;\r\n\r\n\t\treturn _eventIds;\r\n\t}\r\n\t\r\n\r\nfunction setGrantProject(\t\r\n\t\tuint256 GrantProjectId,\r\n\t\tuint256 ProjectId,\r\n\t\tuint256 GranttId\r\n\t) public virtual {\r\n\t\tAllGrantProject[GrantProjectId] = [GranttId,ProjectId];\r\n\r\n\t}\r\n\r\n\r\nfunction CreateGrantProject(\r\n\t\tuint256 ProjectId,\r\n\t\tuint256 GranttId\r\n\t) public returns (uint256) {\r\n\t\tsetGrantProject(_GrantProjectIds,ProjectId,GranttId);\r\n\t\t_GrantProjectIds++;\r\n\t\t\r\n\t\treturn _GrantProjectIds;\r\n\t}\r\n\r\n\r\n\r\n\r\nfunction createGrantEvent(string memory _eventURI)\r\n\t\tpublic\r\n\t\treturns (uint256)\r\n\t{\r\n\t\t_setGrantEventURI(_GrantEventIds, _eventURI);\r\n\t\t_GrantEventIds++;\r\n\r\n\t\treturn _GrantEventIds;\r\n\t}\r\n\r\n\r\nfunction getCheckSubmittedProjectGrant(uint256 Grantid, uint256 ProjectId)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (bool)\r\n\t{\t\t\r\n\t\t\r\n\t\tfor (uint256 i = 0; i < _GrantProjectIds; i++) {\r\n\t\t\tif (\r\n\t\t\t\tAllGrantProject[i][0] == Grantid && \r\n\t\t\t\tAllGrantProject[i][1] == ProjectId \t\t\t\t\r\n\t\t\t) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\nfunction getSearchedProjectByGrantID(uint256 Grantid)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (uint256[] memory)\r\n\t{\r\n\t\t\r\n\t\tuint256 _TemporarySearch = 0;\r\n\t\tuint256 _SearchIds = 0;\r\n\t\t\r\n\t\t\r\n\t\tfor (uint256 i = 0; i < _GrantProjectIds; i++) {\r\n\t\t\tif (\r\n\t\t\t\tAllGrantProject[i][0] == Grantid\r\n\t\t\t) {\r\n\t\t\t\t_TemporarySearch++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tuint256[] memory _SearchedProject = new uint256[](_TemporarySearch);\r\n\r\n\t\tfor (uint256 i = 0; i < _GrantProjectIds; i++) {\r\n\t\t\tif (\r\n\t\t\t\tAllGrantProject[i][0] == Grantid\r\n\t\t\t) {\r\n\t\t\t\t_SearchedProject[_SearchIds] = AllGrantProject[i][1];\r\n\t\t\t\t_SearchIds++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\treturn _SearchedProject;\r\n\t}\r\n\r\nfunction setGrantVote(\t\r\n\t\tuint256 GrantVoteId,\r\n\t\tstring memory Wallet,\r\n\t\tstring memory  ProjectId,\r\n\t\tstring memory  GranttId\r\n\t) public virtual {\r\n\t\tAllGrantVotes[GrantVoteId] = [GranttId,ProjectId,Wallet];\r\n\r\n\t}\r\n\r\n\r\nfunction createGrantVote(string memory Wallet,uint256 ProjectId,uint256 GranttId)\r\n\t\tpublic\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tsetGrantVote(_GrantVoteIds, Wallet,Strings.toString(ProjectId),Strings.toString(GranttId));\r\n\t\t_GrantVoteIds++;\r\n\r\n\t\treturn _GrantVoteIds;\r\n\t}\r\nfunction getSearchedGrantVoteProject(uint256 Grantid,uint256 ProjectId)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (string[] memory)\r\n\t{\r\n\t\t\r\n\t\tuint256 _TemporarySearch = 0;\r\n\t\tuint256 _SearchIds = 0;\r\n\t\t\r\n\t\t\r\n\t\tfor (uint256 i = 0; i < _GrantVoteIds; i++) {\r\n\t\t\tif (\r\n\t\t\t\tkeccak256(bytes(AllGrantVotes[i][0])) == keccak256(bytes(Strings.toString(Grantid))) &&\r\n\t\t\t\tkeccak256(bytes(AllGrantVotes[i][1])) == keccak256(bytes(Strings.toString(ProjectId)))\r\n\t\t\t\t\r\n\t\t\t) {\r\n\t\t\t\t_TemporarySearch++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tstring[] memory _SearchedProject = new string[](_TemporarySearch);\r\n\r\n\t\r\n\t\tfor (uint256 i = 0; i < _GrantVoteIds; i++) {\r\n\t\t\tif (\r\n\t\t\t\tkeccak256(bytes(AllGrantVotes[i][0])) == keccak256(bytes(Strings.toString(Grantid))) &&\r\n\t\t\t\tkeccak256(bytes(AllGrantVotes[i][1])) == keccak256(bytes(Strings.toString(ProjectId)))\r\n\t\t\t\t\r\n\t\t\t) {\r\n\t\t\t_SearchedProject[_SearchIds] = AllGrantVotes[i][2];\r\n\t\t\t_SearchIds++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\treturn _SearchedProject;\r\n\t}\r\n\r\n\r\n\r\nfunction gettokenIdByUri(string memory _tokenURI)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tfor (uint256 i = 0; i < _tokenIds; i++) {\r\n\t\t\tif (\r\n\t\t\t\tkeccak256(bytes(_tokenURIs[i])) == keccak256(bytes(_tokenURI))\r\n\t\t\t) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\r\n\r\nfunction getEventIdByURI(string memory _eventURI)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tfor (uint256 i = 0; i < _eventIds; i++) {\r\n\t\t\tif (\r\n\t\t\t\tkeccak256(bytes(_eventURIs[i][1])) == keccak256(bytes(_eventURI))\r\n\t\t\t) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\nfunction getBidIdByUri(string memory _bidURI)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tfor (uint256 i = 0; i < _bidIds; i++) {\r\n\t\t\tif (keccak256(bytes(_bidURIs[i])) == keccak256(bytes(_bidURI))) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\nfunction gettokenSearchEventTotal(uint256 EventID)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (string[] memory)\r\n\t{\r\n\t\tstring[] memory _SearchedStoreToken = new string[](10);\r\n\r\n\t\tuint256 _EventTokenSearchIds2 = 0;\r\n\r\n\t\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\r\n\t\t\tif (\r\n\t\t\t\tkeccak256(bytes(AllEventTokens[i][0])) ==\r\n\t\t\t\tkeccak256(bytes(Strings.toString(EventID)))\r\n\t\t\t) {\r\n\t\t\t\t_SearchedStoreToken[_EventTokenSearchIds2] = AllEventTokens[i][\r\n\t\t\t\t\t1\r\n\t\t\t\t];\r\n\t\t\t\t_EventTokenSearchIds2++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn _SearchedStoreToken;\r\n\t}\r\n\r\nfunction getSearchEventbyWallet(string memory Wallet)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (string[] memory)\r\n\t{\r\n\t\r\n\t\tuint256 _TemporarySearch = 0;\r\n\t\tuint256 _SearchIds = 0;\r\n\r\n\t\tfor (uint256 i = 0; i < _eventIds; i++) {\r\n\t\t\tif (\r\n\t\t\t\tkeccak256(bytes(_eventURIs[i][0])) ==\r\n\t\t\t\tkeccak256(bytes(Wallet))\r\n\t\t\t) {\r\n\t\t\t\t_TemporarySearch++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tstring[] memory _SearchedStoreEvents = new string[](_TemporarySearch);\r\n\t\tfor (uint256 i = 0; i < _eventIds; i++) {\r\n\t\t\tif (\r\n\t\t\t\tkeccak256(bytes(_eventURIs[i][0])) ==\r\n\t\t\t\tkeccak256(bytes(Wallet))\r\n\t\t\t) {\r\n\t\t\t\t_SearchedStoreEvents[_SearchIds] = _eventURIs[i][1];\r\n\t\t\t\t_SearchIds++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\treturn _SearchedStoreEvents;\r\n\t}\r\n\r\nfunction getGetEventsTokenID(uint256 EventId, string memory _tokenURI)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\r\n\t\t\tif (\r\n\t\t\t\tkeccak256(bytes(AllEventTokens[i][0])) ==\r\n\t\t\t\tkeccak256(bytes(Strings.toString(EventId))) &&\r\n\t\t\t\tkeccak256(bytes(AllEventTokens[i][1])) ==\r\n\t\t\t\tkeccak256(bytes(_tokenURI))\r\n\t\t\t) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\nfunction _getSearchedTokenURI(uint256 _tokenId)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (string memory)\r\n\t{\r\n\t\treturn _SearchedStore[_tokenId][0];\r\n\t}\r\n\r\nfunction _setEventURI(uint256 eventId,  string memory _eventWallet ,string memory _eventURI)\r\n\t\tpublic\r\n\t\tvirtual\r\n\t{\r\n\t\t_eventURIs[eventId] = [\r\n\t\t\t_eventWallet,\r\n\t\t\t_eventURI\r\n\t\t];\r\n\t\t_eventRaised[eventId] = \"0\";\r\n\t}\r\n\r\nfunction _setGrantEventURI(uint256 eventId, string memory _eventURI)\r\n\t\tpublic\r\n\t\tvirtual\r\n\t{\r\n\t\t_GrantEventURIs[eventId] = _eventURI;\r\n\t}\r\n\r\n\r\nfunction _setTokenURI(uint256 tokenId, string memory _tokenURI)\r\n\t\tpublic\r\n\t\tvirtual\r\n\t{\r\n\t\t_tokenURIs[tokenId] = _tokenURI;\r\n\t}\r\n\r\nfunction eventURI(uint256 eventId) public view returns (string[2] memory) {\r\n\t\treturn _eventURIs[eventId];\r\n\t}\r\n\r\nfunction tokenURI(uint256 tokenId)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (string memory)\r\n\t{\r\n\r\n\t\treturn _tokenURIs[tokenId];\r\n\t}\r\n\r\nfunction totalSupply() public view returns (uint256) {\r\n\t\treturn _tokenIds;\r\n\t}\r\n\r\nfunction totalEvent() public view returns (uint256) {\r\n\t\treturn _eventIds;\r\n\t}\r\n\r\nfunction totalGrantEvent() public view returns (uint256) {\r\n\t\treturn _GrantProjectIds;\r\n\t}\r\n\r\nfunction _setBidURI(uint256 bidId, string memory _bidURI) public virtual {\r\n\t\t_bidURIs[bidId] = _bidURI;\r\n\t}\r\n\r\nfunction BidURI(uint256 BidId) public view returns (string memory) {\r\n\t\treturn _bidURIs[BidId];\r\n\t}\r\n\r\nfunction getTotalBid(uint256 TokenID)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (string[] memory)\r\n\t{\r\n\t\tstring[] memory _SearchedStoreBid = new string[](10);\r\n\r\n\t\tuint256 _TokenBidSearchIds2 = 0;\r\n\r\n\t\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\r\n\t\t\tif (\r\n\t\t\t\tkeccak256(bytes(AllTokensBids[i][0])) ==\r\n\t\t\t\tkeccak256(bytes(Strings.toString(TokenID)))\r\n\t\t\t) {\r\n\t\t\t\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\r\n\t\t\t\t_TokenBidSearchIds2++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn _SearchedStoreBid;\r\n\t}\r\n\r\nfunction getBidsSearchToken(uint256 TokenID)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (string[] memory)\r\n\t{\r\n\t\tstring[] memory _SearchedStoreBid = new string[](10);\r\n\r\n\t\tuint256 _TokenBidSearchIds2 = 0;\r\n\r\n\t\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\r\n\t\t\tif (\r\n\t\t\t\tkeccak256(bytes(AllTokensBids[i][0])) ==\r\n\t\t\t\tkeccak256(bytes(Strings.toString(TokenID)))\r\n\t\t\t) {\r\n\t\t\t\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\r\n\t\t\t\t_TokenBidSearchIds2++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn _SearchedStoreBid;\r\n\t}\r\n\r\nfunction _setTokenBid(\r\n\t\tuint256 TokenBidId,\r\n\t\tuint256 TokenId,\r\n\t\tstring memory _BidURI\r\n\t) public virtual {\r\n\t\tAllTokensBids[TokenBidId] = [\r\n\t\t\tStrings.toString(TokenId),\r\n\t\t\tstring(_BidURI)\r\n\t\t];\r\n\t}\r\n \r\nfunction getEventRaised(uint256 _eventId)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (string memory)\r\n\t{\r\n\t\treturn _eventRaised[_eventId];\r\n\t}\r\n\r\nfunction _setEventRaised(uint256 _eventId, string memory _raised)\r\n\t\tpublic\r\n\t{\r\n\t\t_eventRaised[_eventId] = _raised;\r\n\t}\r\n\r\n function createBid(\r\n\t\tuint256 _tokenId,\r\n\t\tstring memory _bidURI,\r\n\t\tstring memory _updatedURI,\r\n\t\tuint256 _eventid,\r\n\t\tstring memory _raised\r\n\t) public   {\r\n\t\tuint256 _EventTokenId = getGetEventsTokenID(\r\n\t\t\t_eventid,\r\n\t\t\t_tokenURIs[_tokenId]\r\n\t\t);\r\n\t\t_tokenURIs[_tokenId] = _updatedURI;\r\n\t\t_setTokenEvent(_EventTokenId, _eventid, _updatedURI);\r\n\t\t_setEventRaised(_eventid,_raised);\r\n\r\n\t\t_setTokenBid(_TokenBidIds, _tokenId, _bidURI);\r\n\t\t_TokenBidIds++;\r\n\t\t_bidIds++;\r\n\t}\r\n\r\n\r\n\r\n}\r\n\r\n\r\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}